<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd" version="take5">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="xmlns" group="group" description="xmlns" targetNamespace="http://www.w3.org/XML/1998/namespace">
    <location link="xmlns.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="xmlns">
<annotation>
<documentation>
           XSLT Generated HRC scheme for language 'xmlns'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : http://www.w3.org/XML/1998/namespace
             hrctype                     : xmlns
             allow-common-attr           : yes
             allow-any-attr              : no
             allow-unknown-elements      : no
             allow-unknown-root-elements : no
             force-single-root           : yes
             default prefixes            : (?{}(?{}xml)(?{}:))
               you can change them with entity 'nsprefix'
             
             </documentation>
<documentation>
          Schema documentation:
   See http://www.w3.org/XML/1998/namespace.html and
   http://www.w3.org/TR/REC-xml for information about this namespace.

    This schema document describes the XML namespace, in a form
    suitable for import by other schema documents.  

    Note that local names in this namespace are intended to be defined
    only by the World Wide Web Consortium or its subgroups.  The
    following names are currently defined in this namespace and should
    not be used with conflicting semantics by any Working Group,
    specification, or document instance:

    base (as an attribute name): denotes an attribute whose value
         provides a URI to be used as the base for interpreting any
         relative URIs in the scope of the element on which it
         appears; its value is inherited.  This name is reserved
         by virtue of its definition in the XML Base specification.

    id   (as an attribute name): denotes an attribute whose value
         should be interpreted as if declared to be of type ID.
         The xml:id specification is not yet a W3C Recommendation,
         but this attribute is included here to facilitate experimentation
         with the mechanisms it proposes.  Note that it is _not_ included
         in the specialAttrs attribute group.

    lang (as an attribute name): denotes an attribute whose value
         is a language code for the natural language of the content of
         any element; its value is inherited.  This name is reserved
         by virtue of its definition in the XML specification.
  
    space (as an attribute name): denotes an attribute whose
         value is a keyword indicating what whitespace processing
         discipline is intended for the content of the element; its
         value is inherited.  This name is reserved by virtue of its
         definition in the XML specification.

    Father (in any context at all): denotes Jon Bosak, the chair of 
         the original XML Working Group.  This name is reserved by 
         the following decision of the W3C XML Plenary and 
         XML Coordination groups:

             In appreciation for his vision, leadership and dedication
             the W3C XML Plenary on this 10th day of February, 2000
             reserves for Jon Bosak in perpetuity the XML name
             xml:Father
  </documentation>
<contributors><![CDATA[
		Eugene Efremov <4mirror@mail.ru>
	]]></contributors>
</annotation>
<import type="def"/>
<region parent="xml:element.defined.start.name" name="element.start.name"/>
<region parent="xml:element.defined.end.name" name="element.end.name"/>
<region parent="xml:element.start.lt" name="element.start.lt"/>
<region parent="xml:element.start.gt" name="element.start.gt"/>
<region parent="xml:element.end.lt" name="element.end.lt"/>
<region parent="xml:element.end.gt" name="element.end.gt"/>
<region parent="element.start.name" name="element.nsprefix"/>
<region parent="xml:element.nscolon" name="element.nscolon"/>
<region parent="xml:Attribute.defined.name" name="Attribute.name"/>
<region parent="xml:Attribute.nsprefix" name="Attribute.nsprefix"/>
<region parent="xml:Attribute.nscolon" name="Attribute.nscolon"/>
<region parent="xml:AttValue.defined" name="AttValue"/>
<region parent="xml:AttValue.defined.start" name="AttValue.start"/>
<region parent="xml:AttValue.defined.end" name="AttValue.end"/>
<region description="Enumerated type values" parent="xml:Enumeration" name="Enumeration"/>
<entity value="(?{}(?{}xml)(?{}:))" name="ns-real-prefix"/>
<entity value="(?{}(?{}xml)(?{}:))" name="nsprefix"/>
<entity value="(?{}(?{}xml)(?{Attribute.nscolon}:))" name="attr-nsprefix"/>
<scheme name="_hrc_int_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x" start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_AttValue">
<block region="AttValue" scheme="xml:AttValue.content.quot" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(&quot;)/"/>
<block region="AttValue" scheme="xml:AttValue.content.apos" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(')/"/>
</scheme>
<scheme name="AttributeContent">
<inherit scheme="xml:AttributeContent">
<virtual subst-scheme="_hrc_int_AttValue" scheme="xml:AttValue"/>
</inherit>
</scheme>
<scheme name="hVersion-content-old"/>
<scheme name="hVersion-content-error">
<inherit scheme="hVersion-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="hVersion-Attributes"/>
<scheme name="hVersion-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="hVersion-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="hYesNo-content-old"/>
<scheme name="hYesNo-content-error">
<inherit scheme="hYesNo-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="hYesNo-Attributes"/>
<scheme name="hYesNo-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="hYesNo-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="hEncoding-content-old"/>
<scheme name="hEncoding-content-error">
<inherit scheme="hEncoding-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="hEncoding-Attributes"/>
<scheme name="hEncoding-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="hEncoding-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: xml
-->
<scheme name="_hrc_int_N30016-content"/>
<scheme name="_hrc_int_N30016-content-error">
<inherit scheme="_hrc_int_N30016-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N30016-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(version)\M([\s\=]|$)/x" scheme="hVersion-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(encoding)\M([\s\=]|$)/x" scheme="hEncoding-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(standalone)\M([\s\=]|$)/x" scheme="hYesNo-AttributeContent"/>
</scheme>
<scheme name="xml-piContent">
<inherit scheme="_hrc_int_N30016-Attributes"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="xml-processing-instruction">
<block region11="xml:PI.end.defined" region10="def:PairEnd" region01="xml:PI.start.defined" region00="def:PairStart" region="xml:PI.content" scheme="xml-piContent" end="/(\?&gt;)/" start="/(&lt;\?)(?{xml:PI.name.defined}xml)\M(\s|$)/"/>
</scheme>
<!--
        parent: xml-stylesheet
-->
<scheme name="_hrc_int_N30027-content"/>
<scheme name="_hrc_int_N30027-content-error">
<inherit scheme="_hrc_int_N30027-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N30027-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(href)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(title)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(media)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(charset)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(alternate)\M([\s\=]|$)/x" scheme="hYesNo-AttributeContent"/>
</scheme>
<scheme name="xml-stylesheet-piContent">
<inherit scheme="_hrc_int_N30027-Attributes"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="xml-stylesheet-processing-instruction">
<block region11="xml:PI.end.defined" region10="def:PairEnd" region01="xml:PI.start.defined" region00="def:PairStart" region="xml:PI.content" scheme="xml-stylesheet-piContent" end="/(\?&gt;)/" start="/(&lt;\?)(?{xml:PI.name.defined}xml-stylesheet)\M(\s|$)/"/>
</scheme>
<!--custom schemes from '../../src/hrc/xml/src/custom.xml.xml'-->
<scheme name="hVersion-content">
<regexp match="/~[a-zA-Z0-9_.:\-]+/" region="def:Constant"/>
<inherit scheme="hBad"/>
</scheme>
<scheme name="hYesNo-content">
<regexp match="/~(yes|no)\b/" region="def:BooleanConstant"/>
<inherit scheme="hBad"/>
</scheme>
<scheme name="hEncoding-content">
<regexp match="/~[A-Za-z][A-Za-z0-9._\-]*/" region="def:String"/>
<inherit scheme="hBad"/>
</scheme>
<scheme name="hBad">
<regexp match="/~[&quot;']/" region="xml:badChar"/>
<regexp match="/./" region="xml:badChar" priority="low"/>
</scheme>
<!--end custom-->
<scheme name="lang-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(lang)\M([\s\=]|$)/x" scheme="xmlschema:language-AttributeContent"/>
</scheme>
<scheme name="space-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(space)\M([\s\=]|$)/x" scheme="_hrc_int_N1001B-AttributeContent"/>
</scheme>
<scheme name="base-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(base)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
</scheme>
<scheme name="id-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(id)\M([\s\=]|$)/x" scheme="xmlschema:ID-AttributeContent"/>
</scheme>
<scheme name="specialAttrs-attributeGroup">
<inherit scheme="base-attribute"/>
<inherit scheme="lang-attribute"/>
<inherit scheme="space-attribute"/>
</scheme>
<!--
        parent: space
-->
<scheme name="_hrc_int_N1001B-content">
<regexp region="Enumeration" match="/default/"/>
<regexp region="Enumeration" match="/preserve/"/>
</scheme>
<scheme name="_hrc_int_N1001B-content-error">
<inherit scheme="_hrc_int_N1001B-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1001B-Attributes"/>
<scheme name="_hrc_int_N1001B-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N1001B-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>

<scheme name="xmlns-root"/>
<scheme name="PI">
<regexp region="xml:badChar" match="/&lt;\?xml\M(\s|$)/i"/>
<inherit scheme="xml-processing-instruction"/>
<inherit scheme="xml-stylesheet-processing-instruction"/>
<inherit scheme="xml:PI"/>
</scheme>
<scheme name="xmlns-root-addref">
<inherit scheme="xmlns-root">
<virtual subst-scheme="PI" scheme="xml:PI"/>
</inherit>
</scheme>
<scheme name="xmlns">
<inherit scheme="xml:singleroot">
<virtual subst-scheme="xmlns-root-addref" scheme="xml:element"/>
</inherit>
</scheme>
</type>
</hrc>
