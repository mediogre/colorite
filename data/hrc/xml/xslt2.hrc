<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd" version="take5">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="xslt2" group="group" description="xslt2" targetNamespace="http://www.w3.org/1999/XSL/Transform">
    <location link="xslt2.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="xslt2">
<annotation>
<documentation>
           XSLT Generated HRC scheme for language 'xslt2'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : http://www.w3.org/1999/XSL/Transform
             hrctype                     : xslt2
             allow-common-attr           : yes
             allow-any-attr              : yes
             allow-unknown-elements      : no
             allow-unknown-root-elements : no
             force-single-root           : yes
             default prefixes            : (?{}(?{}xslt|xsl|xt|x|t)(?{}:))
               you can change them with entity 'nsprefix'
             
             </documentation>
<documentation>
          Schema documentation:
  
    This is a schema for XSLT 2.0 stylesheets.
    
    It defines all the elements that appear in the XSLT namespace; it also
    provides hooks that allow the inclusion of user-defined literal result elements,
    extension instructions, and top-level data elements.
    
    The schema is derived (with kind permission) from a schema for XSLT 1.0 stylesheets
    produced by Asir S Vedamuthu of WebMethods Inc.
    
    This schema is available for use under the conditions of the W3C Software License
    published at http://www.w3.org/Consortium/Legal/copyright-software-19980720
    
    The schema is organized as follows:
    
    PART A: definitions of complex types and model groups used as the basis 
            for element definitions
    PART B: definitions of individual XSLT elements
    PART C: definitions for literal result elements
    PART D: definitions of simple types used in attribute definitions
    
    This schema does not attempt to define all the constraints that apply to a valid
    XSLT 2.0 stylesheet module. It is the intention that all valid stylesheet modules 
    should conform to this schema; however, the schema is non-normative and in the event 
    of any conflict, the text of the Recommendation takes precedence.

    This schema does not implement the special rules that apply when a stylesheet
    has sections that use forwards-compatible-mode. In this mode, setting version="3.0"
    allows elements from the XSLT namespace to be used that are not defined in XSLT 2.0.

    Simplified stylesheets (those with a literal result element as the outermost element)
    will validate against this schema only if validation starts in lax mode.
    
    This version is dated 2005-02-11
    Authors: Michael H Kay, Saxonica Limited
             Jeni Tennison, Jeni Tennison Consulting Ltd.
    
  </documentation>
<contributors><![CDATA[
    Eugene Efremov <4mirror@mail.ru>
]]></contributors>
</annotation>
<import type="def"/>
<region parent="xml:element.defined.start.name" name="element.start.name"/>
<region parent="xml:element.defined.end.name" name="element.end.name"/>
<region parent="xml:element.start.lt" name="element.start.lt"/>
<region parent="xml:element.start.gt" name="element.start.gt"/>
<region parent="xml:element.end.lt" name="element.end.lt"/>
<region parent="xml:element.end.gt" name="element.end.gt"/>
<region parent="element.start.name" name="element.nsprefix"/>
<region parent="xml:element.nscolon" name="element.nscolon"/>
<region parent="xml:Attribute.defined.name" name="Attribute.name"/>
<region parent="xml:Attribute.nsprefix" name="Attribute.nsprefix"/>
<region parent="xml:Attribute.nscolon" name="Attribute.nscolon"/>
<region parent="xml:AttValue.defined" name="AttValue"/>
<region parent="xml:AttValue.defined.start" name="AttValue.start"/>
<region parent="xml:AttValue.defined.end" name="AttValue.end"/>
<region description="Enumerated type values" parent="xml:Enumeration" name="Enumeration"/>
<region description="Stylesheet root" name="stylesheetOutlined" parent="def:Outlined"/>
<region description="Stylesheet root" name="transformOutlined" parent="def:Outlined"/>
<region description="Stylesheet Import" name="importOutlined" parent="def:Outlined"/>
<region description="Stylesheet Include" name="includeOutlined" parent="def:Outlined"/>
<region description="Template definition" name="templateOutlined" parent="def:Outlined"/>
<region description="Function definition" name="functionOutlined" parent="def:Outlined"/>
<entity value="(?{}(?{}xslt|xsl|xt|x|t)(?{}:))" name="ns-real-prefix"/>
<entity value="(?{}(?{}xslt|xsl|xt|x|t)(?{}:))" name="nsprefix"/>
<entity value="(?{}(?{}xslt|xsl|xt|x|t)(?{Attribute.nscolon}:))" name="attr-nsprefix"/>
<scheme name="_hrc_int_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x" start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_AttValue">
<block region="AttValue" scheme="xml:AttValue.content.quot" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(&quot;)/"/>
<block region="AttValue" scheme="xml:AttValue.content.apos" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(')/"/>
</scheme>
<scheme name="AttributeContent">
<inherit scheme="xml:AttributeContent">
<virtual subst-scheme="_hrc_int_AttValue" scheme="xml:AttValue"/>
</inherit>
</scheme>
<scheme name="regex-content-old"/>
<scheme name="regex-content-error-old">
<inherit scheme="regex-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="regex-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="regex-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="regex-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
			xmlss: support attributes for language 'xpath2', schemes '(Quot|Apos)XML.Pattern'
		-->
<scheme name="xmlss-xpath2-XML.Pattern-attr">
<block scheme="xpath2:QuotXML.Pattern" end="/\M'/" start="/~'?#1\M([^']|$)/" region="def:default"/>
<block scheme="xpath2:AposXML.Pattern" end="/\M&quot;/" start="/~&quot;?#1\M([^&quot;]|$)/" region="def:default"/>
</scheme>
<!--
			xmlss: support attributes for language 'xpath2', schemes '(Quot|Apos)XML.Expr'
		-->
<scheme name="xmlss-xpath2-XML.Expr-attr">
<block scheme="xpath2:QuotXML.Expr" end="/\M'/" start="/~'?#1\M([^']|$)/" region="def:default"/>
<block scheme="xpath2:AposXML.Expr" end="/\M&quot;/" start="/~&quot;?#1\M([^&quot;]|$)/" region="def:default"/>
</scheme>
<!--
			xmlss: support attributes for language 'xpath2', schemes '(Quot|Apos)XML.Sequence'
		-->
<scheme name="xmlss-xpath2-XML.Sequence-attr">
<block scheme="xpath2:QuotXML.Sequence" end="/\M'/" start="/~'?#1\M([^']|$)/" region="def:default"/>
<block scheme="xpath2:AposXML.Sequence" end="/\M&quot;/" start="/~&quot;?#1\M([^&quot;]|$)/" region="def:default"/>
</scheme>
<!--
			xmlss: support attributes for language 'xpath2', schemes '(Quot|Apos)XML.EmbeddedExpr'
		-->
<scheme name="xmlss-xpath2-XML.EmbeddedExpr-attr">
<block scheme="xpath2:QuotXML.EmbeddedExpr" end="/\M'/" start="/~'?#1\M([^']|$)/" region="def:default"/>
<block scheme="xpath2:AposXML.EmbeddedExpr" end="/\M&quot;/" start="/~&quot;?#1\M([^&quot;]|$)/" region="def:default"/>
</scheme>
<!--custom schemes from '../../src/hrc/xslt/src/custom.xslt2.xml'-->
<annotation xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<documentation>
        Colorer HRC packages group for
            XSLT, XPath and XQuery
        
        This is autogenerated HRC for
            XSL Transformations (XSLT) Version 2.0
            W3C Working Draft 11 February 2005
            http://www.w3.org/TR/xslt20/
        
    </documentation>
</annotation>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="literal-result-element-substitutionGroup">
<!--  not work... 
        <inherit scheme="sequence-constructor-group-group">
            <virtual scheme="xml:Attribute.common" subst-scheme="Attribute.common"/>
            <virtual scheme="xml:AttValue.content.stream" subst-scheme="avt-content-error"/>
        </inherit>-->
<inherit scheme="variable-element"/>
<inherit scheme="instruction-element"/>
<regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x"/>
<inherit scheme="xml:content">
<virtual scheme="xml:content" subst-scheme="literal-result-element-substitutionGroup"/>
<virtual scheme="xml:Attribute.common" subst-scheme="Attribute.common"/>
<virtual scheme="xml:AttValue.content.stream" subst-scheme="avt-content-error"/>
</inherit>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Attribute.common">
<inherit scheme="xml:Attribute.common"/>
<inherit scheme="literal-result-element-attributes-attributeGroup"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="avt-content-error">
<inherit scheme="avt-content"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="avt-content">
<inherit scheme="xmlss-xpath2-XML.EmbeddedExpr-attr">
<virtual scheme="xpath2:FunctionName" subst-scheme="FunctionName"/>
</inherit>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="pattern-content">
<inherit scheme="xmlss-xpath2-XML.Pattern-attr">
<virtual scheme="xpath2:FunctionName" subst-scheme="FunctionName"/>
</inherit>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="expression-content">
<inherit scheme="xmlss-xpath2-XML.Expr-attr">
<virtual scheme="xpath2:FunctionName" subst-scheme="FunctionName"/>
</inherit>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="sequence-type-content">
<inherit scheme="xmlss-xpath2-XML.Sequence-attr"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="FunctionName">
<inherit scheme="xpath2:FunctionName"/>
<!-- xslt2 functions -->
<keywords region="xpath2:func.name" worddiv="%xpath2:func-wd;">
<word name="current"/>
<word name="current-group"/>
<word name="current-grouping-key"/>
<word name="document"/>
<word name="element-available"/>
<word name="format-date"/>
<word name="format-dateTime"/>
<word name="format-number"/>
<word name="format-time"/>
<word name="generate-id"/>
<word name="key"/>
<word name="regex-group"/>
<word name="system-property"/>
<word name="unparsed-entity-public-id"/>
<word name="unparsed-entity-uri"/>
<word name="unparsed-text"/>
</keywords>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="QName-content">
<inherit scheme="xpath2:QName"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="nametests-content">
<inherit scheme="xpath2:NameTest"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="regex-content-error">
<inherit scheme="regex-content"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="regex-content">
<inherit scheme="xpath2:XML.Regexp">
<virtual scheme="xpath2:XML.Regexp.String" subst-scheme="regex-string"/>
</inherit>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="regex-string">
<regexp match="/(\{{2})([\d\w\s\,]+)(\}{2})/" region0="regexp:Quote" region2="def:Number" region1="def:PairStart" region3="def:PairEnd"/>
<regexp match="/\\(\{{2}|\}{2})/" region="regexp:Symbol"/>
<regexp match="/\{{2}|(\\|\})\}/" region="def:Error"/>
<regexp match="/\\\M\{/" region="regexp:Symbol"/>
<inherit scheme="xpath2:XML.EmbeddedExpr"/>
<inherit scheme="xpath2:XML.Regexp.String"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="method-content">
<keywords region="Enumeration">
<word name="xml"/>
<word name="xhtml"/>
<word name="html"/>
<word name="text"/>
</keywords>
<regexp match="/\b(%xml:NCName;)(\:)%xml:NCName;\b/" region0="xmlschema:Scheme.name" region1="xmlschema:Scheme.nsprefix" region2="xmlschema:Scheme.nscolon"/>
</scheme>
<scheme xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="char-content">
<inherit scheme="xslt:char-content"/>
</scheme>
<!--end custom-->
<scheme name="instruction-substitutionGroup">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;analyze-string ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10064-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;apply-imports ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10082-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;apply-templates ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1008E-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;attribute ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100A3-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;call-template ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100D2-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;choose ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100F6-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;comment ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10104-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;copy ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1010F-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;copy-of ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10129-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;element ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10171-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;fallback ([\s\/&gt;]|$) )/x" scheme="sequence-constructor-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;for-each ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10192-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;for-each-group ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101A7-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;if ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101E8-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;message ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10234-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;namespace ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10243-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;next-match ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10261-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;number ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10272-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;perform-sort ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10300-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;processing-instruction ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1031F-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;result-document ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1032E-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sequence ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10372-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;text ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N103D8-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;value-of ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10412-elementContent"/>
</scheme>
<scheme name="declaration-substitutionGroup">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;attribute-set ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100BE-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;character-map ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100E2-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;decimal-format ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1013F-elementContent"/>
<regexp region1="functionOutlined" match="/\M (&lt; %nsprefix;function \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;function ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101CB-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;import-schema ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101FE-elementContent"/>
<regexp region1="includeOutlined" match="/\M (&lt; %nsprefix;include \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;include ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10210-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;key ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1021B-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;namespace-alias ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10252-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;output ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N102A0-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;preserve-space ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10314-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;strip-space ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1039E-elementContent"/>
<regexp region1="templateOutlined" match="/\M (&lt; %nsprefix;template \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;template ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N103AC-elementContent"/>
</scheme>
<scheme name="transform-substitutionGroup">
<regexp region1="stylesheetOutlined" match="/\M (&lt; %nsprefix;stylesheet \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;stylesheet ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N103EE-elementContent"/>
</scheme>
<scheme name="sequence-constructor-group-group">
<inherit scheme="variable-element"/>
<inherit scheme="instruction-element"/>
<inherit scheme="result-elements-group"/>
</scheme>
<scheme name="declaration-element">
<!--
    Warning! One or more other elements must have "substitutionGroup"
     attribute, referenced to this element.
    If no these elements, you need manually define scheme
     "declaration-substitutionGroup" in your "xslt2" custom-defines file-->
<inherit scheme="declaration-substitutionGroup"/>
</scheme>
<scheme name="instruction-element">
<!--
    Warning! One or more other elements must have "substitutionGroup"
     attribute, referenced to this element.
    If no these elements, you need manually define scheme
     "instruction-substitutionGroup" in your "xslt2" custom-defines file-->
<inherit scheme="instruction-substitutionGroup"/>
</scheme>
<scheme name="analyze-string-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;analyze-string ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10064-elementContent"/>
</scheme>
<scheme name="apply-imports-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;apply-imports ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10082-elementContent"/>
</scheme>
<scheme name="apply-templates-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;apply-templates ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1008E-elementContent"/>
</scheme>
<scheme name="attribute-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;attribute ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100A3-elementContent"/>
</scheme>
<scheme name="attribute-set-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;attribute-set ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100BE-elementContent"/>
</scheme>
<scheme name="call-template-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;call-template ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100D2-elementContent"/>
</scheme>
<scheme name="character-map-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;character-map ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100E2-elementContent"/>
</scheme>
<scheme name="choose-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;choose ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N100F6-elementContent"/>
</scheme>
<scheme name="comment-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;comment ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10104-elementContent"/>
</scheme>
<scheme name="copy-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;copy ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1010F-elementContent"/>
</scheme>
<scheme name="copy-of-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;copy-of ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10129-elementContent"/>
</scheme>
<scheme name="decimal-format-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;decimal-format ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1013F-elementContent"/>
</scheme>
<scheme name="element-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;element ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10171-elementContent"/>
</scheme>
<scheme name="fallback-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;fallback ([\s\/&gt;]|$) )/x" scheme="sequence-constructor-elementContent"/>
</scheme>
<scheme name="for-each-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;for-each ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10192-elementContent"/>
</scheme>
<scheme name="for-each-group-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;for-each-group ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101A7-elementContent"/>
</scheme>
<scheme name="function-element">
<regexp region1="functionOutlined" match="/\M (&lt; %nsprefix;function \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;function ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101CB-elementContent"/>
</scheme>
<scheme name="if-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;if ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101E8-elementContent"/>
</scheme>
<scheme name="import-element">
<regexp region1="importOutlined" match="/\M (&lt; %nsprefix;import \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;import ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101F3-elementContent"/>
</scheme>
<scheme name="import-schema-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;import-schema ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N101FE-elementContent"/>
</scheme>
<scheme name="include-element">
<regexp region1="includeOutlined" match="/\M (&lt; %nsprefix;include \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;include ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10210-elementContent"/>
</scheme>
<scheme name="key-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;key ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1021B-elementContent"/>
</scheme>
<scheme name="matching-substring-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;matching-substring ([\s\/&gt;]|$) )/x" scheme="sequence-constructor-elementContent"/>
</scheme>
<scheme name="message-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;message ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10234-elementContent"/>
</scheme>
<scheme name="namespace-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;namespace ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10243-elementContent"/>
</scheme>
<scheme name="namespace-alias-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;namespace-alias ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10252-elementContent"/>
</scheme>
<scheme name="next-match-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;next-match ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10261-elementContent"/>
</scheme>
<scheme name="non-matching-substring-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;non-matching-substring ([\s\/&gt;]|$) )/x" scheme="sequence-constructor-elementContent"/>
</scheme>
<scheme name="number-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;number ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10272-elementContent"/>
</scheme>
<scheme name="otherwise-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;otherwise ([\s\/&gt;]|$) )/x" scheme="sequence-constructor-elementContent"/>
</scheme>
<scheme name="output-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;output ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N102A0-elementContent"/>
</scheme>
<scheme name="output-character-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;output-character ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N102DA-elementContent"/>
</scheme>
<scheme name="param-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;param ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N102E8-elementContent"/>
</scheme>
<scheme name="perform-sort-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;perform-sort ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10300-elementContent"/>
</scheme>
<scheme name="preserve-space-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;preserve-space ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10314-elementContent"/>
</scheme>
<scheme name="processing-instruction-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;processing-instruction ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1031F-elementContent"/>
</scheme>
<scheme name="result-document-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;result-document ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1032E-elementContent"/>
</scheme>
<scheme name="sequence-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sequence ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10372-elementContent"/>
</scheme>
<scheme name="sort-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sort ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1037F-elementContent"/>
</scheme>
<scheme name="strip-space-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;strip-space ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1039E-elementContent"/>
</scheme>
<scheme name="stylesheet-element">
<regexp region1="stylesheetOutlined" match="/\M (&lt; %nsprefix;stylesheet \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;stylesheet ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N103EE-elementContent"/>
</scheme>
<scheme name="template-element">
<regexp region1="templateOutlined" match="/\M (&lt; %nsprefix;template \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;template ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N103AC-elementContent"/>
</scheme>
<scheme name="text-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;text ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N103D8-elementContent"/>
</scheme>
<scheme name="transform-element">
<regexp region1="transformOutlined" match="/\M (&lt; %nsprefix;transform \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;transform ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N103EE-elementContent"/>
</scheme>
<scheme name="value-of-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;value-of ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10412-elementContent"/>
</scheme>
<scheme name="variable-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;variable ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10423-elementContent"/>
</scheme>
<scheme name="when-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;when ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10436-elementContent"/>
</scheme>
<scheme name="with-param-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;with-param ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10441-elementContent"/>
</scheme>
<scheme name="literal-result-element-element">
<!--
    Warning! One or more other elements must have "substitutionGroup"
     attribute, referenced to this element.
    If no these elements, you need manually define scheme
     "literal-result-element-substitutionGroup" in your "xslt2" custom-defines file-->
<inherit scheme="literal-result-element-substitutionGroup"/>
</scheme>
<scheme name="literal-result-element-attributes-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(default-collation)\M([\s\=]|$)/x" scheme="uri-list-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(extension-element-prefixes)\M([\s\=]|$)/x" scheme="prefixes-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(exclude-result-prefixes)\M([\s\=]|$)/x" scheme="prefixes-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(xpath-default-namespace)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(inherit-namespaces)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(use-attribute-sets)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(use-when)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(version)\M([\s\=]|$)/x" scheme="xmlschema:decimal-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(type)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(validation)\M([\s\=]|$)/x" scheme="validation-type-AttributeContent"/>
</scheme>
<scheme name="result-elements-group">
<inherit scheme="literal-result-element-element"/>
<regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x"/>
<inherit scheme="xml:element"/>
<inherit scheme="xml:element"/>
</scheme>
<!--
    PART A: definitions of complex types and model groups used as the basis 
            for element definitions
  
-->
<scheme name="generic-element-type-content"/>
<scheme name="generic-element-type-content-error">
<inherit scheme="generic-element-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="generic-element-type-content-cdsect">
<inherit scheme="generic-element-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="generic-element-type-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(default-collation)\M([\s\=]|$)/x" scheme="uri-list-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(exclude-result-prefixes)\M([\s\=]|$)/x" scheme="prefix-list-or-all-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(extension-element-prefixes)\M([\s\=]|$)/x" scheme="prefix-list-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use-when)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(xpath-default-namespace)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<inherit scheme="xml:Attribute.any"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="generic-element-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="generic-element-type-content" scheme="xml:element"/>
<virtual subst-scheme="generic-element-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="versioned-element-type-content">
<inherit scheme="generic-element-type-content"/>
</scheme>
<scheme name="versioned-element-type-content-error">
<inherit scheme="versioned-element-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="versioned-element-type-content-cdsect">
<inherit scheme="versioned-element-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="versioned-element-type-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(version)\M([\s\=]|$)/x" scheme="xmlschema:decimal-AttributeContent"/>
<inherit scheme="generic-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="versioned-element-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="versioned-element-type-content" scheme="xml:element"/>
<virtual subst-scheme="versioned-element-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="element-only-versioned-element-type-content"/>
<scheme name="element-only-versioned-element-type-content-error">
<inherit scheme="element-only-versioned-element-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="element-only-versioned-element-type-content-cdsect">
<inherit scheme="element-only-versioned-element-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="element-only-versioned-element-type-Attributes">
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="element-only-versioned-element-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="element-only-versioned-element-type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="element-only-versioned-element-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="sequence-constructor-content">
<inherit scheme="sequence-constructor-group-group"/>
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="sequence-constructor-content-error">
<inherit scheme="sequence-constructor-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="sequence-constructor-content-cdsect">
<inherit scheme="sequence-constructor-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="sequence-constructor-Attributes">
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="sequence-constructor-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="sequence-constructor-content" scheme="xml:element"/>
<virtual subst-scheme="sequence-constructor-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: analyze-string
-->
<scheme name="_hrc_int_N10064-content">
<inherit scheme="matching-substring-element"/>
<inherit scheme="non-matching-substring-element"/>
<inherit scheme="fallback-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10064-content-error">
<inherit scheme="_hrc_int_N10064-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10064-content-cdsect">
<inherit scheme="_hrc_int_N10064-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10064-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(regex)\M([\s\=]|$)/x" scheme="regex-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(regex)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(flags)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10064-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10064-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10064-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: apply-imports
-->
<scheme name="_hrc_int_N10082-content">
<inherit scheme="with-param-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10082-content-error">
<inherit scheme="_hrc_int_N10082-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10082-content-cdsect">
<inherit scheme="_hrc_int_N10082-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10082-Attributes">
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10082-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10082-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10082-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: apply-templates
-->
<scheme name="_hrc_int_N1008E-content">
<inherit scheme="sort-element"/>
<inherit scheme="with-param-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N1008E-content-error">
<inherit scheme="_hrc_int_N1008E-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1008E-content-cdsect">
<inherit scheme="_hrc_int_N1008E-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1008E-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mode)\M([\s\=]|$)/x" scheme="mode-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1008E-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1008E-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N1008E-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: attribute
-->
<scheme name="_hrc_int_N100A3-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N100A3-content-error">
<inherit scheme="_hrc_int_N100A3-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100A3-content-cdsect">
<inherit scheme="_hrc_int_N100A3-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N100A3-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(namespace)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(separator)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(validation)\M([\s\=]|$)/x" scheme="validation-type-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100A3-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N100A3-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N100A3-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: attribute-set
-->
<scheme name="_hrc_int_N100BE-content">
<inherit scheme="attribute-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N100BE-content-error">
<inherit scheme="_hrc_int_N100BE-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100BE-content-cdsect">
<inherit scheme="_hrc_int_N100BE-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N100BE-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use-attribute-sets)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100BE-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N100BE-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N100BE-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: call-template
-->
<scheme name="_hrc_int_N100D2-content">
<inherit scheme="with-param-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N100D2-content-error">
<inherit scheme="_hrc_int_N100D2-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100D2-content-cdsect">
<inherit scheme="_hrc_int_N100D2-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N100D2-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100D2-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N100D2-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N100D2-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: character-map
-->
<scheme name="_hrc_int_N100E2-content">
<inherit scheme="output-character-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N100E2-content-error">
<inherit scheme="_hrc_int_N100E2-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100E2-content-cdsect">
<inherit scheme="_hrc_int_N100E2-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N100E2-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use-character-maps)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100E2-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N100E2-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N100E2-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: choose
-->
<scheme name="_hrc_int_N100F6-content">
<inherit scheme="when-element"/>
<inherit scheme="otherwise-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N100F6-content-error">
<inherit scheme="_hrc_int_N100F6-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100F6-content-cdsect">
<inherit scheme="_hrc_int_N100F6-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N100F6-Attributes">
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100F6-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N100F6-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N100F6-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: comment
-->
<scheme name="_hrc_int_N10104-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10104-content-error">
<inherit scheme="_hrc_int_N10104-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10104-content-cdsect">
<inherit scheme="_hrc_int_N10104-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10104-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10104-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10104-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10104-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: copy
-->
<scheme name="_hrc_int_N1010F-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N1010F-content-error">
<inherit scheme="_hrc_int_N1010F-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1010F-content-cdsect">
<inherit scheme="_hrc_int_N1010F-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1010F-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(copy-namespaces)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(inherit-namespaces)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use-attribute-sets)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(validation)\M([\s\=]|$)/x" scheme="validation-type-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1010F-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1010F-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N1010F-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: copy-of
-->
<scheme name="_hrc_int_N10129-content">
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10129-content-error">
<inherit scheme="_hrc_int_N10129-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10129-content-cdsect">
<inherit scheme="_hrc_int_N10129-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10129-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(copy-namespaces)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(validation)\M([\s\=]|$)/x" scheme="validation-type-AttributeContent"/>
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10129-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10129-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10129-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: decimal-format
-->
<scheme name="_hrc_int_N1013F-content">
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N1013F-content-error">
<inherit scheme="_hrc_int_N1013F-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1013F-content-cdsect">
<inherit scheme="_hrc_int_N1013F-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1013F-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(decimal-separator)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(grouping-separator)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(infinity)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(minus-sign)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(NaN)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(percent)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(per-mille)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(zero-digit)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(digit)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(pattern-separator)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1013F-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1013F-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N1013F-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: element
-->
<scheme name="_hrc_int_N10171-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10171-content-error">
<inherit scheme="_hrc_int_N10171-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10171-content-cdsect">
<inherit scheme="_hrc_int_N10171-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10171-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(namespace)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(inherit-namespaces)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use-attribute-sets)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(validation)\M([\s\=]|$)/x" scheme="validation-type-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10171-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10171-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10171-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: for-each
-->
<scheme name="_hrc_int_N10192-content">
<inherit scheme="sort-element"/>
<inherit scheme="sequence-constructor-group-group"/>
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10192-content-error">
<inherit scheme="_hrc_int_N10192-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10192-content-cdsect">
<inherit scheme="_hrc_int_N10192-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10192-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10192-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10192-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10192-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: for-each-group
-->
<scheme name="_hrc_int_N101A7-content">
<inherit scheme="sort-element"/>
<inherit scheme="sequence-constructor-group-group"/>
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N101A7-content-error">
<inherit scheme="_hrc_int_N101A7-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N101A7-content-cdsect">
<inherit scheme="_hrc_int_N101A7-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N101A7-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(group-by)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(group-adjacent)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(group-starting-with)\M([\s\=]|$)/x" scheme="pattern-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(group-ending-with)\M([\s\=]|$)/x" scheme="pattern-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(collation)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N101A7-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N101A7-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N101A7-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: function
-->
<scheme name="_hrc_int_N101CB-content">
<inherit scheme="param-element"/>
<inherit scheme="sequence-constructor-group-group"/>
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N101CB-content-error">
<inherit scheme="_hrc_int_N101CB-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N101CB-content-cdsect">
<inherit scheme="_hrc_int_N101CB-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N101CB-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(override)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(as)\M([\s\=]|$)/x" scheme="sequence-type-AttributeContent"/>
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N101CB-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N101CB-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N101CB-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: if
-->
<scheme name="_hrc_int_N101E8-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N101E8-content-error">
<inherit scheme="_hrc_int_N101E8-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N101E8-content-cdsect">
<inherit scheme="_hrc_int_N101E8-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N101E8-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(test)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N101E8-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N101E8-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N101E8-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: import
-->
<scheme name="_hrc_int_N101F3-content">
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N101F3-content-error">
<inherit scheme="_hrc_int_N101F3-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N101F3-content-cdsect">
<inherit scheme="_hrc_int_N101F3-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N101F3-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(href)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N101F3-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N101F3-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N101F3-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: import-schema
-->
<scheme name="_hrc_int_N101FE-content">
<inherit scheme="xmlschema:schema-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N101FE-content-error">
<inherit scheme="_hrc_int_N101FE-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N101FE-content-cdsect">
<inherit scheme="_hrc_int_N101FE-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N101FE-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(namespace)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(schema-location)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N101FE-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N101FE-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N101FE-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: include
-->
<scheme name="_hrc_int_N10210-content">
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10210-content-error">
<inherit scheme="_hrc_int_N10210-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10210-content-cdsect">
<inherit scheme="_hrc_int_N10210-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10210-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(href)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10210-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10210-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10210-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: key
-->
<scheme name="_hrc_int_N1021B-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N1021B-content-error">
<inherit scheme="_hrc_int_N1021B-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1021B-content-cdsect">
<inherit scheme="_hrc_int_N1021B-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1021B-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(match)\M([\s\=]|$)/x" scheme="pattern-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(collation)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1021B-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1021B-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N1021B-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: message
-->
<scheme name="_hrc_int_N10234-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10234-content-error">
<inherit scheme="_hrc_int_N10234-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10234-content-cdsect">
<inherit scheme="_hrc_int_N10234-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10234-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(terminate)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10234-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10234-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10234-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: namespace
-->
<scheme name="_hrc_int_N10243-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10243-content-error">
<inherit scheme="_hrc_int_N10243-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10243-content-cdsect">
<inherit scheme="_hrc_int_N10243-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10243-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10243-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10243-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10243-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: namespace-alias
-->
<scheme name="_hrc_int_N10252-content">
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10252-content-error">
<inherit scheme="_hrc_int_N10252-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10252-content-cdsect">
<inherit scheme="_hrc_int_N10252-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10252-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(stylesheet-prefix)\M([\s\=]|$)/x" scheme="prefix-or-default-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(result-prefix)\M([\s\=]|$)/x" scheme="prefix-or-default-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10252-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10252-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10252-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: next-match
-->
<scheme name="_hrc_int_N10261-content">
<inherit scheme="with-param-element"/>
<inherit scheme="fallback-element"/>
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10261-content-error">
<inherit scheme="_hrc_int_N10261-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10261-content-cdsect">
<inherit scheme="_hrc_int_N10261-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10261-Attributes">
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10261-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10261-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10261-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: number
-->
<scheme name="_hrc_int_N10272-content">
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10272-content-error">
<inherit scheme="_hrc_int_N10272-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10272-content-cdsect">
<inherit scheme="_hrc_int_N10272-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10272-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(level)\M([\s\=]|$)/x" scheme="level-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(count)\M([\s\=]|$)/x" scheme="pattern-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(from)\M([\s\=]|$)/x" scheme="pattern-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(format)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lang)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(letter-value)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(ordinal)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(grouping-separator)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(grouping-size)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10272-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10272-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10272-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: output
-->
<scheme name="_hrc_int_N102A0-content">
<inherit scheme="generic-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N102A0-content-error">
<inherit scheme="_hrc_int_N102A0-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N102A0-content-cdsect">
<inherit scheme="_hrc_int_N102A0-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N102A0-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(method)\M([\s\=]|$)/x" scheme="method-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(byte-order-mark)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(cdata-section-elements)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(doctype-public)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(doctype-system)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(encoding)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(escape-uri-attributes)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(include-content-type)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(indent)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(media-type)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(normalization-form)\M([\s\=]|$)/x" scheme="xmlschema:NMTOKEN-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(omit-xml-declaration)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(standalone)\M([\s\=]|$)/x" scheme="yes-or-no-or-omit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(undeclare-prefixes)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use-character-maps)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(version)\M([\s\=]|$)/x" scheme="xmlschema:NMTOKEN-AttributeContent"/>
<inherit scheme="generic-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N102A0-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N102A0-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N102A0-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: output-character
-->
<scheme name="_hrc_int_N102DA-content">
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N102DA-content-error">
<inherit scheme="_hrc_int_N102DA-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N102DA-content-cdsect">
<inherit scheme="_hrc_int_N102DA-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N102DA-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(character)\M([\s\=]|$)/x" scheme="char-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(string)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N102DA-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N102DA-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N102DA-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: param
-->
<scheme name="_hrc_int_N102E8-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N102E8-content-error">
<inherit scheme="_hrc_int_N102E8-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N102E8-content-cdsect">
<inherit scheme="_hrc_int_N102E8-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N102E8-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(as)\M([\s\=]|$)/x" scheme="sequence-type-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(required)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(tunnel)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N102E8-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N102E8-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N102E8-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: perform-sort
-->
<scheme name="_hrc_int_N10300-content">
<inherit scheme="sort-element"/>
<inherit scheme="sequence-constructor-group-group"/>
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10300-content-error">
<inherit scheme="_hrc_int_N10300-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10300-content-cdsect">
<inherit scheme="_hrc_int_N10300-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10300-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10300-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10300-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10300-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: preserve-space
-->
<scheme name="_hrc_int_N10314-content">
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N10314-content-error">
<inherit scheme="_hrc_int_N10314-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10314-content-cdsect">
<inherit scheme="_hrc_int_N10314-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10314-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(elements)\M([\s\=]|$)/x" scheme="nametests-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10314-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10314-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10314-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: processing-instruction
-->
<scheme name="_hrc_int_N1031F-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N1031F-content-error">
<inherit scheme="_hrc_int_N1031F-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1031F-content-cdsect">
<inherit scheme="_hrc_int_N1031F-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1031F-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1031F-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1031F-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N1031F-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: result-document
-->
<scheme name="_hrc_int_N1032E-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N1032E-content-error">
<inherit scheme="_hrc_int_N1032E-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1032E-content-cdsect">
<inherit scheme="_hrc_int_N1032E-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1032E-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(format)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(href)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(validation)\M([\s\=]|$)/x" scheme="validation-type-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(method)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(byte-order-mark)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(cdata-section-elements)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(doctype-public)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(doctype-system)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(encoding)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(escape-uri-attributes)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(include-content-type)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(indent)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(media-type)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(normalization-form)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(omit-xml-declaration)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(standalone)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(undeclare-prefixes)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(use-character-maps)\M([\s\=]|$)/x" scheme="QNames-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(output-version)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1032E-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1032E-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N1032E-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: sequence
-->
<scheme name="_hrc_int_N10372-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10372-content-error">
<inherit scheme="_hrc_int_N10372-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10372-content-cdsect">
<inherit scheme="_hrc_int_N10372-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10372-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(as)\M([\s\=]|$)/x" scheme="sequence-type-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10372-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10372-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10372-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: sort
-->
<scheme name="_hrc_int_N1037F-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N1037F-content-error">
<inherit scheme="_hrc_int_N1037F-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1037F-content-cdsect">
<inherit scheme="_hrc_int_N1037F-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1037F-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lang)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(data-type)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(order)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(case-order)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(collation)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(stable)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1037F-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1037F-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N1037F-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: strip-space
-->
<scheme name="_hrc_int_N1039E-content">
<inherit scheme="element-only-versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N1039E-content-error">
<inherit scheme="_hrc_int_N1039E-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1039E-content-cdsect">
<inherit scheme="_hrc_int_N1039E-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1039E-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(elements)\M([\s\=]|$)/x" scheme="nametests-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1039E-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1039E-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N1039E-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: template
-->
<scheme name="_hrc_int_N103AC-content">
<inherit scheme="param-element"/>
<inherit scheme="sequence-constructor-group-group"/>
<inherit scheme="versioned-element-type-content"/>
</scheme>
<scheme name="_hrc_int_N103AC-content-error">
<inherit scheme="_hrc_int_N103AC-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N103AC-content-cdsect">
<inherit scheme="_hrc_int_N103AC-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N103AC-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(match)\M([\s\=]|$)/x" scheme="pattern-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(priority)\M([\s\=]|$)/x" scheme="xmlschema:decimal-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mode)\M([\s\=]|$)/x" scheme="modes-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(as)\M([\s\=]|$)/x" scheme="sequence-type-AttributeContent"/>
<inherit scheme="versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N103AC-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N103AC-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N103AC-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="text-element-base-type-content">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="text-element-base-type-content-error">
<inherit scheme="text-element-base-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="text-element-base-type-content-cdsect">
<inherit scheme="text-element-base-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="text-element-base-type-Attributes">
<inherit scheme="xml:Attribute.any"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="text-element-base-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="text-element-base-type-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="text-element-base-type-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="text-element-base-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N103CF-content">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="_hrc_int_N103CF-content-error">
<inherit scheme="_hrc_int_N103CF-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N103CF-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N103CF-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N103CF-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: text
-->
<scheme name="_hrc_int_N103D8-content">
<inherit scheme="text-element-base-type-content"/>
</scheme>
<scheme name="_hrc_int_N103D8-content-error">
<inherit scheme="_hrc_int_N103D8-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N103D8-content-cdsect">
<inherit scheme="_hrc_int_N103D8-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N103D8-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(disable-output-escaping)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N103D8-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N103D8-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="_hrc_int_N103D8-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N103D8-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="transform-element-base-type-content"/>
<scheme name="transform-element-base-type-content-error">
<inherit scheme="transform-element-base-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="transform-element-base-type-content-cdsect">
<inherit scheme="transform-element-base-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="transform-element-base-type-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(version)\M([\s\=]|$)/x" scheme="xmlschema:decimal-AttributeContent"/>
<inherit scheme="element-only-versioned-element-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="transform-element-base-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="transform-element-base-type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="transform-element-base-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: transform
-->
<scheme name="_hrc_int_N103EE-content">
<inherit scheme="import-element"/>
<inherit scheme="declaration-element"/>
<inherit scheme="variable-element"/>
<inherit scheme="param-element"/>
<regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x"/>
<inherit scheme="xml:element"/>
<inherit scheme="transform-element-base-type-content"/>
</scheme>
<scheme name="_hrc_int_N103EE-content-error">
<inherit scheme="_hrc_int_N103EE-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N103EE-content-cdsect">
<inherit scheme="_hrc_int_N103EE-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N103EE-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(id)\M([\s\=]|$)/x" scheme="xmlschema:ID-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(default-validation)\M([\s\=]|$)/x" scheme="validation-strip-or-preserve-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(input-type-annotations)\M([\s\=]|$)/x" scheme="input-type-annotations-type-AttributeContent"/>
<inherit scheme="transform-element-base-type-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N103EE-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N103EE-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N103EE-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: value-of
-->
<scheme name="_hrc_int_N10412-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10412-content-error">
<inherit scheme="_hrc_int_N10412-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10412-content-cdsect">
<inherit scheme="_hrc_int_N10412-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10412-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(separator)\M([\s\=]|$)/x" scheme="avt-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(disable-output-escaping)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10412-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10412-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10412-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: variable
-->
<scheme name="_hrc_int_N10423-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10423-content-error">
<inherit scheme="_hrc_int_N10423-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10423-content-cdsect">
<inherit scheme="_hrc_int_N10423-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10423-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(as)\M([\s\=]|$)/x" scheme="sequence-type-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10423-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10423-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10423-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: when
-->
<scheme name="_hrc_int_N10436-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10436-content-error">
<inherit scheme="_hrc_int_N10436-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10436-content-cdsect">
<inherit scheme="_hrc_int_N10436-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10436-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(test)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10436-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10436-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10436-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: with-param
-->
<scheme name="_hrc_int_N10441-content">
<inherit scheme="sequence-constructor-content"/>
</scheme>
<scheme name="_hrc_int_N10441-content-error">
<inherit scheme="_hrc_int_N10441-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10441-content-cdsect">
<inherit scheme="_hrc_int_N10441-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10441-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="QName-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(select)\M([\s\=]|$)/x" scheme="expression-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(as)\M([\s\=]|$)/x" scheme="sequence-type-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(tunnel)\M([\s\=]|$)/x" scheme="yes-or-no-AttributeContent"/>
<inherit scheme="sequence-constructor-Attributes"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10441-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10441-content" scheme="xml:element"/>
<virtual subst-scheme="_hrc_int_N10441-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
    PART D: definitions of simple types used in stylesheet attributes 
  
-->
<scheme name="avt-content-old">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="avt-content-error-old">
<inherit scheme="avt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="avt-content-cdsect">
<inherit scheme="avt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="avt-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="avt-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="avt-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="avt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="avt-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="avt-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="avt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="char-content-old">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="char-content-error">
<inherit scheme="char-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="char-content-cdsect">
<inherit scheme="char-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="char-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="char-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="char-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="char-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="char-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="char-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="char-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="expression-content-old">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: .+-->
<regexp priority="low" region="Enumeration" match="/.+/"/>
</scheme>
<scheme name="expression-content-error">
<inherit scheme="expression-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="expression-content-cdsect">
<inherit scheme="expression-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="expression-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="expression-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="expression-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="expression-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="expression-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="expression-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="expression-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="input-type-annotations-type-content">
<regexp region="Enumeration" match="/preserve/"/>
<regexp region="Enumeration" match="/strip/"/>
<regexp region="Enumeration" match="/unspecified/"/>
</scheme>
<scheme name="input-type-annotations-type-content-error">
<inherit scheme="input-type-annotations-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="input-type-annotations-type-content-cdsect">
<inherit scheme="input-type-annotations-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="input-type-annotations-type-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="input-type-annotations-type-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="input-type-annotations-type-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="input-type-annotations-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="input-type-annotations-type-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="input-type-annotations-type-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="input-type-annotations-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="level-content">
<regexp region="Enumeration" match="/single/"/>
<regexp region="Enumeration" match="/multiple/"/>
<regexp region="Enumeration" match="/any/"/>
</scheme>
<scheme name="level-content-error">
<inherit scheme="level-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="level-content-cdsect">
<inherit scheme="level-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="level-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="level-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="level-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="level-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="level-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="level-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="level-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mode-content">
<!--union:-->
<inherit scheme="QName-content"/>
<inherit scheme="_hrc_int_N104D2-content"/>
</scheme>
<scheme name="mode-content-error">
<inherit scheme="mode-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mode-content-cdsect">
<inherit scheme="mode-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mode-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mode-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="mode-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mode-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mode-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="mode-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="mode-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104D2-content">
<regexp region="Enumeration" match="/#default/"/>
<regexp region="Enumeration" match="/#current/"/>
</scheme>
<scheme name="_hrc_int_N104D2-content-error">
<inherit scheme="_hrc_int_N104D2-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104D2-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104D2-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104D2-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="modes-content">
<!--union:-->
<inherit scheme="_hrc_int_N104DF-content"/>
<inherit scheme="_hrc_int_N104E9-content"/>
</scheme>
<scheme name="modes-content-error">
<inherit scheme="modes-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="modes-content-cdsect">
<inherit scheme="modes-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="modes-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="modes-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="modes-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="modes-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="modes-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="modes-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="modes-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104DF-content">
<!--list:-->
<inherit scheme="_hrc_int_N104E1-content"/>
</scheme>
<scheme name="_hrc_int_N104DF-content-error">
<inherit scheme="_hrc_int_N104DF-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104DF-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104DF-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104DF-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104E1-content">
<!--union:-->
<inherit scheme="QName-content"/>
<inherit scheme="_hrc_int_N104E4-content"/>
</scheme>
<scheme name="_hrc_int_N104E1-content-error">
<inherit scheme="_hrc_int_N104E1-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104E1-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104E1-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104E1-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104E4-content">
<regexp region="Enumeration" match="/#default/"/>
</scheme>
<scheme name="_hrc_int_N104E4-content-error">
<inherit scheme="_hrc_int_N104E4-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104E4-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104E4-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104E4-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104E9-content">
<regexp region="Enumeration" match="/#all/"/>
</scheme>
<scheme name="_hrc_int_N104E9-content-error">
<inherit scheme="_hrc_int_N104E9-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104E9-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104E9-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104E9-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="nametests-content-old">
<!--list:-->
<inherit scheme="_hrc_int_N104F4-content"/>
</scheme>
<scheme name="nametests-content-error">
<inherit scheme="nametests-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="nametests-content-cdsect">
<inherit scheme="nametests-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="nametests-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="nametests-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="nametests-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="nametests-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="nametests-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="nametests-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="nametests-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104F4-content">
<!--union:-->
<inherit scheme="QName-content"/>
<inherit scheme="_hrc_int_N104F7-content"/>
<inherit scheme="_hrc_int_N104FC-content"/>
</scheme>
<scheme name="_hrc_int_N104F4-content-error">
<inherit scheme="_hrc_int_N104F4-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104F4-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104F4-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104F4-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104F7-content">
<regexp region="Enumeration" match="/\*/"/>
</scheme>
<scheme name="_hrc_int_N104F7-content-error">
<inherit scheme="_hrc_int_N104F7-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104F7-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104F7-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104F7-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N104FC-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: \i\c*:\*-->
<regexp priority="low" region="Enumeration" match="/[%xml:NCNameStartChar;][%xml:NCNameChar;]*:\*/"/>
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: \*:\i\c*-->
<regexp priority="low" region="Enumeration" match="/\*:[%xml:NCNameStartChar;][%xml:NCNameChar;]*/"/>
</scheme>
<scheme name="_hrc_int_N104FC-content-error">
<inherit scheme="_hrc_int_N104FC-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N104FC-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N104FC-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N104FC-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="prefixes-content">
<!--list:-->
<inherit scheme="xmlschema:NCName-content"/>
</scheme>
<scheme name="prefixes-content-error">
<inherit scheme="prefixes-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="prefixes-content-cdsect">
<inherit scheme="prefixes-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="prefixes-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="prefixes-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="prefixes-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="prefixes-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="prefixes-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="prefixes-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="prefixes-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="prefix-list-or-all-content">
<!--union:-->
<inherit scheme="prefix-list-content"/>
<inherit scheme="_hrc_int_N1050B-content"/>
</scheme>
<scheme name="prefix-list-or-all-content-error">
<inherit scheme="prefix-list-or-all-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="prefix-list-or-all-content-cdsect">
<inherit scheme="prefix-list-or-all-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="prefix-list-or-all-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="prefix-list-or-all-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="prefix-list-or-all-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="prefix-list-or-all-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="prefix-list-or-all-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="prefix-list-or-all-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="prefix-list-or-all-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1050B-content">
<regexp region="Enumeration" match="/#all/"/>
</scheme>
<scheme name="_hrc_int_N1050B-content-error">
<inherit scheme="_hrc_int_N1050B-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1050B-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1050B-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N1050B-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="prefix-list-content">
<!--list:-->
<inherit scheme="prefix-or-default-content"/>
</scheme>
<scheme name="prefix-list-content-error">
<inherit scheme="prefix-list-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="prefix-list-content-cdsect">
<inherit scheme="prefix-list-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="prefix-list-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="prefix-list-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="prefix-list-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="prefix-list-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="prefix-list-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="prefix-list-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="prefix-list-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="method-content-old">
<!--union:-->
<inherit scheme="_hrc_int_N1051A-content"/>
<inherit scheme="_hrc_int_N10525-content"/>
</scheme>
<scheme name="method-content-error">
<inherit scheme="method-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="method-content-cdsect">
<inherit scheme="method-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="method-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="method-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="method-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="method-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="method-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="method-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="method-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1051A-content">
<regexp region="Enumeration" match="/xml/"/>
<regexp region="Enumeration" match="/xhtml/"/>
<regexp region="Enumeration" match="/html/"/>
<regexp region="Enumeration" match="/text/"/>
</scheme>
<scheme name="_hrc_int_N1051A-content-error">
<inherit scheme="_hrc_int_N1051A-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1051A-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1051A-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N1051A-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10525-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: \c*:\c*-->
<regexp priority="low" region="Enumeration" match="/[%xml:NCNameChar;]*:[%xml:NCNameChar;]*/"/>
</scheme>
<scheme name="_hrc_int_N10525-content-error">
<inherit scheme="_hrc_int_N10525-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10525-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10525-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N10525-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="pattern-content-old">
<inherit scheme="expression-content"/>
</scheme>
<scheme name="pattern-content-error">
<inherit scheme="pattern-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="pattern-content-cdsect">
<inherit scheme="pattern-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="pattern-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="pattern-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="pattern-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="pattern-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="pattern-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="pattern-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="pattern-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="prefix-or-default-content">
<!--union:-->
<inherit scheme="xmlschema:NCName-content"/>
<inherit scheme="_hrc_int_N10538-content"/>
</scheme>
<scheme name="prefix-or-default-content-error">
<inherit scheme="prefix-or-default-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="prefix-or-default-content-cdsect">
<inherit scheme="prefix-or-default-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="prefix-or-default-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="prefix-or-default-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="prefix-or-default-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="prefix-or-default-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="prefix-or-default-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="prefix-or-default-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="prefix-or-default-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10538-content">
<regexp region="Enumeration" match="/#default/"/>
</scheme>
<scheme name="_hrc_int_N10538-content-error">
<inherit scheme="_hrc_int_N10538-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10538-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10538-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N10538-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="QNames-content">
<!--list:-->
<inherit scheme="QName-content"/>
</scheme>
<scheme name="QNames-content-error">
<inherit scheme="QNames-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="QNames-content-cdsect">
<inherit scheme="QNames-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="QNames-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="QNames-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="QNames-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="QNames-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="QNames-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="QNames-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="QNames-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="QName-content-old">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: ([^:]+:)?[^:]+-->
<regexp priority="low" region="Enumeration" match="/([^:]+:)?[^:]+/"/>
</scheme>
<scheme name="QName-content-error">
<inherit scheme="QName-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="QName-content-cdsect">
<inherit scheme="QName-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="QName-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="QName-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="QName-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="QName-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="QName-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="QName-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="QName-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="sequence-type-content-old">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: .+-->
<regexp priority="low" region="Enumeration" match="/.+/"/>
</scheme>
<scheme name="sequence-type-content-error">
<inherit scheme="sequence-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="sequence-type-content-cdsect">
<inherit scheme="sequence-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="sequence-type-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="sequence-type-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="sequence-type-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="sequence-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="sequence-type-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="sequence-type-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="sequence-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="uri-list-content">
<!--list:-->
<inherit scheme="xmlschema:anyURI-content"/>
</scheme>
<scheme name="uri-list-content-error">
<inherit scheme="uri-list-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="uri-list-content-cdsect">
<inherit scheme="uri-list-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="uri-list-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="uri-list-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="uri-list-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="uri-list-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="uri-list-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="uri-list-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="uri-list-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="validation-strip-or-preserve-content">
<regexp region="Enumeration" match="/preserve/"/>
<regexp region="Enumeration" match="/strip/"/>
</scheme>
<scheme name="validation-strip-or-preserve-content-error">
<inherit scheme="validation-strip-or-preserve-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="validation-strip-or-preserve-content-cdsect">
<inherit scheme="validation-strip-or-preserve-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="validation-strip-or-preserve-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="validation-strip-or-preserve-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="validation-strip-or-preserve-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="validation-strip-or-preserve-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="validation-strip-or-preserve-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="validation-strip-or-preserve-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="validation-strip-or-preserve-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="validation-type-content">
<regexp region="Enumeration" match="/strict/"/>
<regexp region="Enumeration" match="/lax/"/>
<regexp region="Enumeration" match="/preserve/"/>
<regexp region="Enumeration" match="/strip/"/>
</scheme>
<scheme name="validation-type-content-error">
<inherit scheme="validation-type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="validation-type-content-cdsect">
<inherit scheme="validation-type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="validation-type-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="validation-type-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="validation-type-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="validation-type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="validation-type-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="validation-type-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="validation-type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="yes-or-no-content">
<regexp region="Enumeration" match="/yes/"/>
<regexp region="Enumeration" match="/no/"/>
</scheme>
<scheme name="yes-or-no-content-error">
<inherit scheme="yes-or-no-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="yes-or-no-content-cdsect">
<inherit scheme="yes-or-no-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="yes-or-no-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="yes-or-no-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="yes-or-no-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="yes-or-no-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="yes-or-no-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="yes-or-no-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="yes-or-no-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="yes-or-no-or-omit-content">
<regexp region="Enumeration" match="/yes/"/>
<regexp region="Enumeration" match="/no/"/>
<regexp region="Enumeration" match="/omit/"/>
</scheme>
<scheme name="yes-or-no-or-omit-content-error">
<inherit scheme="yes-or-no-or-omit-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="yes-or-no-or-omit-content-cdsect">
<inherit scheme="yes-or-no-or-omit-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="yes-or-no-or-omit-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="yes-or-no-or-omit-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="yes-or-no-or-omit-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="yes-or-no-or-omit-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="yes-or-no-or-omit-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="yes-or-no-or-omit-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="yes-or-no-or-omit-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>

<scheme name="xslt2-root">
<inherit scheme="stylesheet-element"/>
<inherit scheme="transform-element"/>
<inherit scheme="literal-result-element-element"/>
</scheme>
<scheme name="xslt2-root-addref">
<inherit scheme="xslt2-root"/>
</scheme>
<scheme name="xslt2">
<inherit scheme="xml:singleroot">
<virtual subst-scheme="xslt2-root-addref" scheme="xml:element"/>
</inherit>
</scheme>
</type>
</hrc>
