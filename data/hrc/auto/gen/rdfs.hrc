<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd" version="take5">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="rdfs" group="group" description="rdfs" targetNamespace="http://www.w3.org/2000/01/rdf-schema#">
    <location link="rdfs.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="rdfs">
<annotation>
<documentation>
           XSLT Generated HRC scheme for language 'rdfs'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : http://www.w3.org/2000/01/rdf-schema#
             hrctype                     : rdfs
             allow-common-attr           : yes
             allow-any-attr              : no
             allow-unknown-elements      : no
             allow-unknown-root-elements : no
             force-single-root           : yes
             default prefixes            : (?{}(?{}rdfs)(?{}:))
               you can change them with entity 'nsprefix'
             
             </documentation>
<documentation>
          Schema documentation:
  
   XML schema for RDF Schema
   Written by Eugene Efremov &lt;4mirror@mail.ru&gt;
  
 </documentation>
<contributors><![CDATA[Eugene Efremov]]></contributors>
</annotation>
<import type="def"/>
<region parent="xml:element.defined.start.name" name="element.start.name"/>
<region parent="xml:element.defined.end.name" name="element.end.name"/>
<region parent="xml:element.start.lt" name="element.start.lt"/>
<region parent="xml:element.start.gt" name="element.start.gt"/>
<region parent="xml:element.end.lt" name="element.end.lt"/>
<region parent="xml:element.end.gt" name="element.end.gt"/>
<region parent="element.start.name" name="element.nsprefix"/>
<region parent="xml:element.nscolon" name="element.nscolon"/>
<region parent="xml:Attribute.defined.name" name="Attribute.name"/>
<region parent="xml:Attribute.nsprefix" name="Attribute.nsprefix"/>
<region parent="xml:Attribute.nscolon" name="Attribute.nscolon"/>
<region parent="xml:AttValue.defined" name="AttValue"/>
<region parent="xml:AttValue.defined.start" name="AttValue.start"/>
<region parent="xml:AttValue.defined.end" name="AttValue.end"/>
<region description="Enumerated type values" parent="xml:Enumeration" name="Enumeration"/>
<region description="RDF class description" name="ClassOutlined" parent="def:Outlined"/>
<entity value="(?{}(?{}rdfs)(?{}:))" name="ns-real-prefix"/>
<entity value="(?{}(?{}rdfs)(?{}:))" name="nsprefix"/>
<entity value="(?{}(?{}rdfs)(?{Attribute.nscolon}:))" name="attr-nsprefix"/>
<scheme name="_hrc_int_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x" start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_AttValue">
<block region="AttValue" scheme="xml:AttValue.content.quot" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(&quot;)/"/>
<block region="AttValue" scheme="xml:AttValue.content.apos" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(')/"/>
</scheme>
<scheme name="AttributeContent">
<inherit scheme="xml:AttributeContent">
<virtual subst-scheme="_hrc_int_AttValue" scheme="xml:AttValue"/>
</inherit>
</scheme>
<!--custom schemes from '../../src/hrc/rdf/src/custom.rdf.xml'-->
<!--end custom-->
<scheme name="Resource-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Resource ([\s\/&gt;]|$) )/x" scheme="rdf:nodeElement-elementContent"/>
</scheme>
<scheme name="Literal-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Literal ([\s\/&gt;]|$) )/x" scheme="rdf:nodeElement-elementContent"/>
</scheme>
<scheme name="Class-element">
<regexp region1="ClassOutlined" match="/\M (&lt; %nsprefix;Class \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Class ([\s\/&gt;]|$) )/x" scheme="rdf:nodeElement-elementContent"/>
</scheme>
<scheme name="Datatype-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Datatype ([\s\/&gt;]|$) )/x" scheme="rdf:nodeElement-elementContent"/>
</scheme>
<scheme name="Container-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Container ([\s\/&gt;]|$) )/x" scheme="rdf:nodeElement-elementContent"/>
</scheme>
<scheme name="ContainerMembershipProperty-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;ContainerMembershipProperty ([\s\/&gt;]|$) )/x" scheme="rdf:nodeElement-elementContent"/>
</scheme>
<scheme name="nodeElementURIs-group">
<inherit scheme="Resource-element"/>
<inherit scheme="Literal-element"/>
<inherit scheme="Class-element"/>
<inherit scheme="Datatype-element"/>
<inherit scheme="Container-element"/>
<inherit scheme="ContainerMembershipProperty-element"/>
</scheme>
<scheme name="subClassOf-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;subClassOf ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="subPropertyOf-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;subPropertyOf ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="domain-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;domain ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="range-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;range ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="label-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;label ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="comment-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;comment ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="member-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;member ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="seeAlso-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;seeAlso ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="isDefinedBy-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;isDefinedBy ([\s\/&gt;]|$) )/x" scheme="rdf:propertyElt-elementContent"/>
</scheme>
<scheme name="propertyElementURIs-group">
<inherit scheme="subClassOf-element"/>
<inherit scheme="subPropertyOf-element"/>
<inherit scheme="domain-element"/>
<inherit scheme="range-element"/>
<inherit scheme="label-element"/>
<inherit scheme="comment-element"/>
<inherit scheme="member-element"/>
<inherit scheme="seeAlso-element"/>
<inherit scheme="isDefinedBy-element"/>
</scheme>
<scheme name="propertyAttributeURIs-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(subClassOf)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(subPropertyOf)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(domain)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(range)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(label)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(comment)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(member)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(seeAlso)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(isDefinedBy)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>

<scheme name="rdfs-root"/>
<scheme name="rdfs-root-addref">
<inherit scheme="rdfs-root"/>
</scheme>
<scheme name="rdfs">
<inherit scheme="xml:singleroot">
<virtual subst-scheme="rdfs-root-addref" scheme="xml:element"/>
</inherit>
</scheme>
</type>
</hrc>
