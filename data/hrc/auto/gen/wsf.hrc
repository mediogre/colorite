<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd" version="take5">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="wsf" group="group" description="wsf" targetNamespace="uri:wsf">
    <location link="wsf.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="wsf">
<annotation>
<documentation>
           XSLT Generated HRC scheme for language 'wsf'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : uri:wsf
             hrctype                     : wsf
             allow-common-attr           : yes
             allow-any-attr              : no
             allow-unknown-elements      : yes
             allow-unknown-root-elements : no
             force-single-root           : yes
             default prefixes            : (?{}(?{}wsf)(?{}:))?
               you can change them with entity 'nsprefix'
             
             Note! This scheme was generated for ignorecase pseudo-xml.
             
         </documentation>
<documentation>
          Schema documentation:
    Windows Script Host (*.wsf) schema. 
    Written for colorer.take5.
    File version 1.1
    
    (c) Eugene Efremov &lt;4mirror@mail.ru&gt;, 2005
        techtonik &lt;techtonik@php.net&gt;
</documentation>
<contributors><![CDATA[Cail Lomecb, Max Belugin, Eugene Efremov]]></contributors>
</annotation>
<import type="def"/>
<region parent="xml:element.defined.start.name" name="element.start.name"/>
<region parent="xml:element.defined.end.name" name="element.end.name"/>
<region parent="xml:element.start.lt" name="element.start.lt"/>
<region parent="xml:element.start.gt" name="element.start.gt"/>
<region parent="xml:element.end.lt" name="element.end.lt"/>
<region parent="xml:element.end.gt" name="element.end.gt"/>
<region parent="element.start.name" name="element.nsprefix"/>
<region parent="xml:element.nscolon" name="element.nscolon"/>
<region parent="xml:Attribute.defined.name" name="Attribute.name"/>
<region parent="xml:Attribute.nsprefix" name="Attribute.nsprefix"/>
<region parent="xml:Attribute.nscolon" name="Attribute.nscolon"/>
<region parent="xml:AttValue.defined" name="AttValue"/>
<region parent="xml:AttValue.defined.start" name="AttValue.start"/>
<region parent="xml:AttValue.defined.end" name="AttValue.end"/>
<region description="Enumerated type values" parent="xml:Enumeration" name="Enumeration"/>
<region description="WSH job" name="jobOutlined" parent="def:Outlined"/>
<entity value="(?{}(?{}wsf)(?{}:))" name="ns-real-prefix"/>
<entity value="(?{}(?{}wsf)(?{}:))?" name="nsprefix"/>
<entity value="(?{}(?{}wsf)(?{Attribute.nscolon}:))" name="attr-nsprefix"/>
<scheme name="_hrc_int_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x" start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_AttValue">
<block region="AttValue" scheme="xml:AttValue.content.quot" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(&quot;)/"/>
<block region="AttValue" scheme="xml:AttValue.content.apos" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(')/"/>
</scheme>
<scheme name="AttributeContent">
<inherit scheme="xml:AttributeContent">
<virtual subst-scheme="_hrc_int_AttValue" scheme="xml:AttValue"/>
</inherit>
</scheme>
<!--
        parent: job
-->
<scheme name="_hrc_int_N30013-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="_hrc_int_N30013-content-error">
<inherit scheme="_hrc_int_N30013-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N30013-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(error)\M([\s\=]|$)/ix" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(debug)\M([\s\=]|$)/ix" scheme="xmlschema:boolean-AttributeContent"/>
</scheme>
<scheme name="job-piContent">
<inherit scheme="_hrc_int_N30013-Attributes"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="job-processing-instruction">
<block region11="xml:PI.end.defined" region10="def:PairEnd" region01="xml:PI.start.defined" region00="def:PairStart" region="xml:PI.content" scheme="job-piContent" end="/(\?&gt;)/" start="/(&lt;\?)(?{xml:PI.name.defined}job)\M(\s|$)/"/>
</scheme>
<!--custom schemes from '../../src/hrc/wsc/src/custom.wsf.xml'-->
<!--end custom-->
<scheme name="runtime-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;runtime ([\s\/&gt;]|$) )/ix" scheme="_hrc_int_N10054-elementContent"/>
</scheme>
<scheme name="job-element">
<regexp region1="jobOutlined" match="/\M (&lt; %nsprefix;job \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/ix"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;job ([\s\/&gt;]|$) )/ix" scheme="_hrc_int_N1006E-elementContent"/>
</scheme>
<scheme name="package-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;package ([\s\/&gt;]|$) )/ix" scheme="_hrc_int_N10088-elementContent"/>
</scheme>
<!--
    Windows Script Host (*.wsf) schema. 
    Written for colorer.take5.
    File version 1.1
    
    (c) Eugene Efremov <4mirror@mail.ru>, 2005
        techtonik <techtonik@php.net>

-->
<scheme name="scriptType-content">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="scriptType-content-error">
<inherit scheme="scriptType-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="scriptType-content-cdsect">
<inherit scheme="scriptType-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="scriptType-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(language)\M([\s\=]|$)/ix" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(src)\M([\s\=]|$)/ix" scheme="xmlschema:anyURI-AttributeContent"/>
</scheme>
<scheme name="scriptType-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="scriptType-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="scriptType-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="scriptType-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="objectType-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="objectType-content-error">
<inherit scheme="objectType-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="objectType-content-cdsect">
<inherit scheme="objectType-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="objectType-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(id)\M([\s\=]|$)/ix" scheme="xmlschema:ID-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(classid)\M([\s\=]|$)/ix" scheme="wsc:classid-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(progid)\M([\s\=]|$)/ix" scheme="wsc:progid-AttributeContent"/>
</scheme>
<scheme name="objectType-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="objectType-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="objectType-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="unnamedType-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="unnamedType-content-error">
<inherit scheme="unnamedType-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="unnamedType-content-cdsect">
<inherit scheme="unnamedType-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="unnamedType-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/ix" scheme="xmlschema:token-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(helpstring)\M([\s\=]|$)/ix" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(many)\M([\s\=]|$)/ix" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(required)\M([\s\=]|$)/ix" scheme="xmlschema:boolean-AttributeContent"/>
</scheme>
<scheme name="unnamedType-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="unnamedType-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="unnamedType-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="namedType-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="namedType-content-error">
<inherit scheme="namedType-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="namedType-content-cdsect">
<inherit scheme="namedType-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="namedType-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/ix" scheme="xmlschema:token-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(helpstring)\M([\s\=]|$)/ix" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/ix" scheme="_hrc_int_N10045-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(required)\M([\s\=]|$)/ix" scheme="xmlschema:boolean-AttributeContent"/>
</scheme>
<scheme name="namedType-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="namedType-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="namedType-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: type
-->
<scheme name="_hrc_int_N10045-content">
<regexp region="Enumeration" match="/string/i"/>
<regexp region="Enumeration" match="/boolean/i"/>
<regexp region="Enumeration" match="/simple/i"/>
</scheme>
<scheme name="_hrc_int_N10045-content-error">
<inherit scheme="_hrc_int_N10045-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10045-Attributes"/>
<scheme name="_hrc_int_N10045-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N10045-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: runtime
-->
<scheme name="_hrc_int_N10054-content">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;named ([\s\/&gt;]|$) )/ix" scheme="namedType-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;unnamed ([\s\/&gt;]|$) )/ix" scheme="unnamedType-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;description ([\s\/&gt;]|$) )/ix" scheme="xmlschema:string-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;example ([\s\/&gt;]|$) )/ix" scheme="xmlschema:string-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;usage ([\s\/&gt;]|$) )/ix" scheme="xmlschema:string-elementContent"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="_hrc_int_N10054-content-error">
<inherit scheme="_hrc_int_N10054-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10054-content-cdsect">
<inherit scheme="_hrc_int_N10054-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10054-Attributes"/>
<scheme name="_hrc_int_N10054-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10054-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10054-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: job
-->
<scheme name="_hrc_int_N1006E-content">
<inherit scheme="runtime-element"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;script ([\s\/&gt;]|$) )/ix" scheme="scriptType-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;object ([\s\/&gt;]|$) )/ix" scheme="objectType-elementContent"/>
<inherit scheme="wsc:resource-element"/>
<inherit scheme="wsc:reference-element"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="_hrc_int_N1006E-content-error">
<inherit scheme="_hrc_int_N1006E-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1006E-content-cdsect">
<inherit scheme="_hrc_int_N1006E-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1006E-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(id)\M([\s\=]|$)/ix" scheme="xmlschema:ID-AttributeContent"/>
</scheme>
<scheme name="_hrc_int_N1006E-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1006E-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N1006E-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: package
-->
<scheme name="_hrc_int_N10088-content">
<inherit scheme="job-element"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="_hrc_int_N10088-content-error">
<inherit scheme="_hrc_int_N10088-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10088-content-cdsect">
<inherit scheme="_hrc_int_N10088-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10088-Attributes"/>
<scheme name="_hrc_int_N10088-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10088-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10088-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>

<scheme name="wsf-root">
<annotation>
<documentation>
               You can replace these elements with needed single root element
               with customizing HRC generation process.
              </documentation>
</annotation>
<inherit scheme="runtime-element"/>
<inherit scheme="job-element"/>
<inherit scheme="package-element"/>
</scheme>
<scheme name="PI">
<regexp region="xml:badChar" match="/&lt;\?xml\M(\s|$)/i"/>
<inherit scheme="job-processing-instruction"/>
<inherit scheme="xml:PI"/>
</scheme>
<scheme name="wsf-root-addref">
<inherit scheme="wsf-root">
<virtual subst-scheme="PI" scheme="xml:PI"/>
</inherit>
</scheme>
<scheme name="wsf">
<inherit scheme="xml:singleroot">
<virtual subst-scheme="wsf-root-addref" scheme="xml:element"/>
</inherit>
</scheme>
</type>
</hrc>
