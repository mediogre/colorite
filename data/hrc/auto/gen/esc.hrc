<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd" version="take5">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="esc" group="group" description="esc" targetNamespace="uri:esc">
    <location link="esc.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="esc">
<annotation>
<documentation>
           XSLT Generated HRC scheme for language 'esc'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : uri:esc
             hrctype                     : esc
             allow-common-attr           : yes
             allow-any-attr              : no
             allow-unknown-elements      : no
             allow-unknown-root-elements : no
             force-single-root           : yes
             default prefixes            : (?{}(?{}esc)(?{}:))?
               you can change them with entity 'nsprefix'
             
             </documentation>
<documentation>
          Schema documentation:</documentation>
<contributors><![CDATA[Eugene Efremov]]></contributors>
</annotation>
<import type="def"/>
<region parent="xml:element.defined.start.name" name="element.start.name"/>
<region parent="xml:element.defined.end.name" name="element.end.name"/>
<region parent="xml:element.start.lt" name="element.start.lt"/>
<region parent="xml:element.start.gt" name="element.start.gt"/>
<region parent="xml:element.end.lt" name="element.end.lt"/>
<region parent="xml:element.end.gt" name="element.end.gt"/>
<region parent="element.start.name" name="element.nsprefix"/>
<region parent="xml:element.nscolon" name="element.nscolon"/>
<region parent="xml:Attribute.defined.name" name="Attribute.name"/>
<region parent="xml:Attribute.nsprefix" name="Attribute.nsprefix"/>
<region parent="xml:Attribute.nscolon" name="Attribute.nscolon"/>
<region parent="xml:AttValue.defined" name="AttValue"/>
<region parent="xml:AttValue.defined.start" name="AttValue.start"/>
<region parent="xml:AttValue.defined.end" name="AttValue.end"/>
<region description="Enumerated type values" parent="xml:Enumeration" name="Enumeration"/>
<region description="type setting" name="typeOutlined" parent="def:Outlined"/>
<entity value="(?{}(?{}esc)(?{}:))" name="ns-real-prefix"/>
<entity value="(?{}(?{}esc)(?{}:))?" name="nsprefix"/>
<entity value="(?{}(?{}esc)(?{Attribute.nscolon}:))" name="attr-nsprefix"/>
<scheme name="_hrc_int_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x" start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_AttValue">
<block region="AttValue" scheme="xml:AttValue.content.quot" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(&quot;)/"/>
<block region="AttValue" scheme="xml:AttValue.content.apos" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(')/"/>
</scheme>
<scheme name="AttributeContent">
<inherit scheme="xml:AttributeContent">
<virtual subst-scheme="_hrc_int_AttValue" scheme="xml:AttValue"/>
</inherit>
</scheme>
<!--custom schemes from '../../src/hrc/esc/src/custom.esc.xml'-->
<scheme name="farmacro-content">
<inherit scheme="far:macro.string"/>
<inherit scheme="farmacro-content-old"/>
</scheme>
<scheme name="farmacro-content-error">
<inherit scheme="farmacro-content"/>
</scheme>
<scheme name="farmask-content">
<regexp match="/abstract/" region="Enumeration"/>
<inherit scheme="far:mask.string"/>
<inherit scheme="farmask-content-old"/>
</scheme>
<scheme name="farmask-content-error">
<inherit scheme="farmask-content"/>
</scheme>
<scheme name="farkey-content">
<inherit scheme="far:macro.keys"/>
</scheme>
<scheme name="include-string-content">
<inherit scheme="def:Path"/>
<inherit scheme="include-string-content-old"/>
</scheme>
<scheme name="include-string-content-error">
<inherit scheme="include-string-content"/>
</scheme>
<scheme name="nurber-pres-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: \d{1,3}%?-->
<regexp region="def:Number" region1="def:NumberSuffix" match="/\d{1,3}(\%?)/"/>
</scheme>
<!--end custom-->
<scheme name="Esc-Settings-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Esc-Settings ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N1003D-elementContent"/>
</scheme>
<!--
  Simple scheme for support
  "Extended selection case" plugin by Ivan Sintyurin (spinoza@mail.ru)

  Note. 'uri:esc' is fictive namespace.

  Written by Eugene Efremov (4mirror@mail.ru)
 
-->
<scheme name="farmacro-content-old">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="farmacro-content-error-old">
<inherit scheme="farmacro-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="farmacro-content-cdsect">
<inherit scheme="farmacro-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="farmacro-Attributes"/>
<scheme name="farmacro-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="farmacro-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="farmacro-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="farmacro-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="farmacro-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="farmacro-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="farkey-content-old">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="farkey-content-error">
<inherit scheme="farkey-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="farkey-content-cdsect">
<inherit scheme="farkey-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="farkey-Attributes"/>
<scheme name="farkey-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="farkey-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="farkey-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="farkey-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="farkey-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="farkey-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="farmask-content-old">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="farmask-content-error-old">
<inherit scheme="farmask-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="farmask-content-cdsect">
<inherit scheme="farmask-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="farmask-Attributes"/>
<scheme name="farmask-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="farmask-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="farmask-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="farmask-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="farmask-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="farmask-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="include-string-content-old">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="include-string-content-error-old">
<inherit scheme="include-string-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="include-string-content-cdsect">
<inherit scheme="include-string-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="include-string-Attributes"/>
<scheme name="include-string-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="include-string-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="include-string-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="include-string-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="include-string-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="include-string-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="nurber-pres-content-old">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: \d{1,3}%?-->
<regexp priority="low" region="Enumeration" match="/\d{1,3}\%?/"/>
</scheme>
<scheme name="nurber-pres-content-error">
<inherit scheme="nurber-pres-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="nurber-pres-content-cdsect">
<inherit scheme="nurber-pres-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="nurber-pres-Attributes"/>
<scheme name="nurber-pres-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="nurber-pres-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="nurber-pres-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="nurber-pres-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="nurber-pres-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="nurber-pres-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="onoff-content">
<regexp region="Enumeration" match="/on/"/>
<regexp region="Enumeration" match="/off/"/>
</scheme>
<scheme name="onoff-content-error">
<inherit scheme="onoff-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="onoff-content-cdsect">
<inherit scheme="onoff-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="onoff-Attributes"/>
<scheme name="onoff-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="onoff-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="onoff-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="onoff-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="onoff-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="onoff-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="ooi-content">
<regexp region="Enumeration" match="/on/"/>
<regexp region="Enumeration" match="/off/"/>
<regexp region="Enumeration" match="/ignore/"/>
</scheme>
<scheme name="ooi-content-error">
<inherit scheme="ooi-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="ooi-content-cdsect">
<inherit scheme="ooi-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="ooi-Attributes"/>
<scheme name="ooi-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="ooi-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="ooi-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="ooi-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="ooi-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="ooi-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: Esc-Settings
-->
<scheme name="_hrc_int_N1003D-content">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Types ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10041-elementContent"/>
</scheme>
<scheme name="_hrc_int_N1003D-content-error">
<inherit scheme="_hrc_int_N1003D-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1003D-content-cdsect">
<inherit scheme="_hrc_int_N1003D-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N1003D-Attributes"/>
<scheme name="_hrc_int_N1003D-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N1003D-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N1003D-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: Types
-->
<scheme name="_hrc_int_N10041-content">
<regexp region1="typeOutlined" match="/\M (&lt; %nsprefix;type \b\s*.*? (([\x22\x27])(.*?)(\3))? )([\/&gt;\s]|$)/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;type ([\s\/&gt;]|$) )/x" scheme="type-elementContent"/>
</scheme>
<scheme name="_hrc_int_N10041-content-error">
<inherit scheme="_hrc_int_N10041-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10041-content-cdsect">
<inherit scheme="_hrc_int_N10041-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10041-Attributes"/>
<scheme name="_hrc_int_N10041-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10041-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10041-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="type-content">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;margin ([\s\/&gt;]|$) )/x" scheme="margin-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;quote ([\s\/&gt;]|$) )/x" scheme="quote-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;tab ([\s\/&gt;]|$) )/x" scheme="tab-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;smartkey ([\s\/&gt;]|$) )/x" scheme="smartkey-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;kill ([\s\/&gt;]|$) )/x" scheme="kill-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;addsymbol ([\s\/&gt;]|$) )/x" scheme="addsymbol-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;autoindent ([\s\/&gt;]|$) )/x" scheme="autoindent-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;cursorbeol ([\s\/&gt;]|$) )/x" scheme="cursorbeol-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;charcodebase ([\s\/&gt;]|$) )/x" scheme="charcodebase-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;eol ([\s\/&gt;]|$) )/x" scheme="eol-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;table ([\s\/&gt;]|$) )/x" scheme="table-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;savepos ([\s\/&gt;]|$) )/x" scheme="savepos-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;lockmode ([\s\/&gt;]|$) )/x" scheme="lockmode-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;usermacro ([\s\/&gt;]|$) )/x" scheme="usermacro-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;lockfile ([\s\/&gt;]|$) )/x" scheme="lockfile-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;wordsym ([\s\/&gt;]|$) )/x" scheme="wordsym-elementContent"/>
</scheme>
<scheme name="type-content-error">
<inherit scheme="type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="type-content-cdsect">
<inherit scheme="type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="type-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(include)\M([\s\=]|$)/x" scheme="include-string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mask)\M([\s\=]|$)/x" scheme="farmask-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(inherit)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(skippath)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
</scheme>
<scheme name="type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="margin-content"/>
<scheme name="margin-content-error">
<inherit scheme="margin-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="margin-content-cdsect">
<inherit scheme="margin-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="margin-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(autowrap)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(wrap)\M([\s\=]|$)/x" scheme="nurber-pres-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(justify)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
</scheme>
<scheme name="margin-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="margin-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="margin-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="quote-content"/>
<scheme name="quote-content-error">
<inherit scheme="quote-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="quote-content-cdsect">
<inherit scheme="quote-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="quote-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(quoteeol)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
</scheme>
<scheme name="quote-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="quote-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="quote-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="tab-content"/>
<scheme name="tab-content-error">
<inherit scheme="tab-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="tab-content-cdsect">
<inherit scheme="tab-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="tab-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(tabsize)\M([\s\=]|$)/x" scheme="xmlschema:positiveInteger-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(expandtabs)\M([\s\=]|$)/x" scheme="ooi-AttributeContent"/>
</scheme>
<scheme name="tab-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="tab-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="tab-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="smartkey-content"/>
<scheme name="smartkey-content-error">
<inherit scheme="smartkey-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="smartkey-content-cdsect">
<inherit scheme="smartkey-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="smartkey-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(tab)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(backspace)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(stopchar)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(home)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lines)\M([\s\=]|$)/x" scheme="xmlschema:positiveInteger-AttributeContent"/>
</scheme>
<scheme name="smartkey-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="smartkey-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="smartkey-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="kill-content"/>
<scheme name="kill-content-error">
<inherit scheme="kill-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="kill-content-cdsect">
<inherit scheme="kill-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="kill-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(killspace)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(p_end)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(p_minuses)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(killemptylines)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(forcekel)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
</scheme>
<scheme name="kill-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="kill-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="kill-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="addsymbol-content"/>
<scheme name="addsymbol-content-error">
<inherit scheme="addsymbol-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="addsymbol-content-cdsect">
<inherit scheme="addsymbol-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="addsymbol-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(start)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(end)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(start_b)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(end_b)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<scheme name="addsymbol-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="addsymbol-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="addsymbol-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="autoindent-content"/>
<scheme name="autoindent-content-error">
<inherit scheme="autoindent-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="autoindent-content-cdsect">
<inherit scheme="autoindent-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="autoindent-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="ooi-AttributeContent"/>
</scheme>
<scheme name="autoindent-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="autoindent-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="autoindent-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="cursorbeol-content"/>
<scheme name="cursorbeol-content-error">
<inherit scheme="cursorbeol-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="cursorbeol-content-cdsect">
<inherit scheme="cursorbeol-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="cursorbeol-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="ooi-AttributeContent"/>
</scheme>
<scheme name="cursorbeol-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="cursorbeol-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="cursorbeol-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="charcodebase-content"/>
<scheme name="charcodebase-content-error">
<inherit scheme="charcodebase-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="charcodebase-content-cdsect">
<inherit scheme="charcodebase-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="charcodebase-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="_hrc_int_N100FD-AttributeContent"/>
</scheme>
<scheme name="charcodebase-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="charcodebase-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="charcodebase-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: value
-->
<scheme name="_hrc_int_N100FD-content">
<regexp region="Enumeration" match="/hex/"/>
<regexp region="Enumeration" match="/dec/"/>
<regexp region="Enumeration" match="/oct/"/>
<regexp region="Enumeration" match="/ignore/"/>
</scheme>
<scheme name="_hrc_int_N100FD-content-error">
<inherit scheme="_hrc_int_N100FD-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100FD-Attributes"/>
<scheme name="_hrc_int_N100FD-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N100FD-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="eol-content"/>
<scheme name="eol-content-error">
<inherit scheme="eol-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="eol-content-cdsect">
<inherit scheme="eol-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="eol-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<scheme name="eol-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="eol-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="eol-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="table-content"/>
<scheme name="table-content-error">
<inherit scheme="table-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="table-content-cdsect">
<inherit scheme="table-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="table-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="xmlschema:nonNegativeInteger-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="farmask-AttributeContent"/>
</scheme>
<scheme name="table-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="table-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="table-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="savepos-content"/>
<scheme name="savepos-content-error">
<inherit scheme="savepos-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="savepos-content-cdsect">
<inherit scheme="savepos-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="savepos-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="ooi-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(minlines)\M([\s\=]|$)/x" scheme="xmlschema:nonNegativeInteger-AttributeContent"/>
</scheme>
<scheme name="savepos-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="savepos-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="savepos-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="lockmode-content"/>
<scheme name="lockmode-content-error">
<inherit scheme="lockmode-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="lockmode-content-cdsect">
<inherit scheme="lockmode-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="lockmode-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="ooi-AttributeContent"/>
</scheme>
<scheme name="lockmode-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="lockmode-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="lockmode-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="usermacro-content">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;macro ([\s\/&gt;]|$) )/x" scheme="macro-elementContent"/>
</scheme>
<scheme name="usermacro-content-error">
<inherit scheme="usermacro-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="usermacro-content-cdsect">
<inherit scheme="usermacro-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="usermacro-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
</scheme>
<scheme name="usermacro-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="usermacro-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="usermacro-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="lockfile-content"/>
<scheme name="lockfile-content-error">
<inherit scheme="lockfile-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="lockfile-content-cdsect">
<inherit scheme="lockfile-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="lockfile-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
</scheme>
<scheme name="lockfile-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="lockfile-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="lockfile-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="wordsym-content"/>
<scheme name="wordsym-content-error">
<inherit scheme="wordsym-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="wordsym-content-cdsect">
<inherit scheme="wordsym-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="wordsym-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(value)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(alphanum)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(additional)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<scheme name="wordsym-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="wordsym-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="wordsym-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="macro-content"/>
<scheme name="macro-content-error">
<inherit scheme="macro-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="macro-content-cdsect">
<inherit scheme="macro-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="macro-Attributes">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(key)\M([\s\=]|$)/x" scheme="farkey-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(sequence)\M([\s\=]|$)/x" scheme="farmacro-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lclick)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mclick)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rlick)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rctrl)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lctrl)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(ralt)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lalt)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(shift)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(stop)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(selection)\M([\s\=]|$)/x" scheme="_hrc_int_N10168-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(silent)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(enable)\M([\s\=]|$)/x" scheme="onoff-AttributeContent"/>
</scheme>
<scheme name="macro-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="macro-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="macro-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: selection
-->
<scheme name="_hrc_int_N10168-content">
<regexp region="Enumeration" match="/on/"/>
<regexp region="Enumeration" match="/off/"/>
<regexp region="Enumeration" match="/stream/"/>
<regexp region="Enumeration" match="/column/"/>
<regexp region="Enumeration" match="/ignore/"/>
</scheme>
<scheme name="_hrc_int_N10168-content-error">
<inherit scheme="_hrc_int_N10168-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10168-Attributes"/>
<scheme name="_hrc_int_N10168-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N10168-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>

<scheme name="esc-root">
<annotation>
<documentation>
               You can replace these elements with needed single root element
               with customizing HRC generation process.
              </documentation>
</annotation>
<inherit scheme="Esc-Settings-element"/>
</scheme>
<scheme name="esc-root-addref">
<inherit scheme="esc-root"/>
</scheme>
<scheme name="esc">
<inherit scheme="xml:singleroot">
<virtual subst-scheme="esc-root-addref" scheme="xml:element"/>
</inherit>
</scheme>
</type>
</hrc>
