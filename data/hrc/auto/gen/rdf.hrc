<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd" version="take5">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="rdf" group="group" description="rdf" targetNamespace="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
    <location link="rdf.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="rdf">
<annotation>
<documentation>
           XSLT Generated HRC scheme for language 'rdf'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : http://www.w3.org/1999/02/22-rdf-syntax-ns#
             hrctype                     : rdf
             allow-common-attr           : yes
             allow-any-attr              : no
             allow-unknown-elements      : no
             allow-unknown-root-elements : yes
             force-single-root           : yes
             default prefixes            : (?{}(?{}rdf|RDF)(?{}:))
               you can change them with entity 'nsprefix'
             
             </documentation>
<documentation>
          Schema documentation:
  
   XML schema for RDF/XML Syntax Specification.
   Written by Eugene Efremov &lt;4mirror@mail.ru&gt;
  
 </documentation>
<contributors><![CDATA[Eugene Efremov]]></contributors>
</annotation>
<import type="def"/>
<region parent="xml:element.defined.start.name" name="element.start.name"/>
<region parent="xml:element.defined.end.name" name="element.end.name"/>
<region parent="xml:element.start.lt" name="element.start.lt"/>
<region parent="xml:element.start.gt" name="element.start.gt"/>
<region parent="xml:element.end.lt" name="element.end.lt"/>
<region parent="xml:element.end.gt" name="element.end.gt"/>
<region parent="element.start.name" name="element.nsprefix"/>
<region parent="xml:element.nscolon" name="element.nscolon"/>
<region parent="xml:Attribute.defined.name" name="Attribute.name"/>
<region parent="xml:Attribute.nsprefix" name="Attribute.nsprefix"/>
<region parent="xml:Attribute.nscolon" name="Attribute.nscolon"/>
<region parent="xml:AttValue.defined" name="AttValue"/>
<region parent="xml:AttValue.defined.start" name="AttValue.start"/>
<region parent="xml:AttValue.defined.end" name="AttValue.end"/>
<region description="Enumerated type values" parent="xml:Enumeration" name="Enumeration"/>
<entity value="(?{}(?{}rdf|RDF)(?{}:))" name="ns-real-prefix"/>
<entity value="(?{}(?{}rdf|RDF)(?{}:))" name="nsprefix"/>
<entity value="(?{}(?{}rdf|RDF)(?{Attribute.nscolon}:))" name="attr-nsprefix"/>
<scheme name="_hrc_int_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x" start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_AttValue">
<block region="AttValue" scheme="xml:AttValue.content.quot" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(&quot;)/"/>
<block region="AttValue" scheme="xml:AttValue.content.apos" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(')/"/>
</scheme>
<scheme name="AttributeContent">
<inherit scheme="xml:AttributeContent">
<virtual subst-scheme="_hrc_int_AttValue" scheme="xml:AttValue"/>
</inherit>
</scheme>
<!--custom schemes from '../../src/hrc/rdf/src/custom.rdf.xml'-->
<region description="subject" name="subjectOutlined" parent="def:Outlined"/>
<entity name="coreSyntaxTerms" value="RDF|ID|about|parseType|resource|nodeID|datatype"/>
<entity name="oldTerms" value="aboutEach|aboutEachPrefix|bagID"/>
<entity name="nodeElementURIs" value="(?{}%coreSyntaxTerms;|li|%oldTerms;)\b"/>
<entity name="propertyElementURIs" value="(?{}%coreSyntaxTerms;|Description|%oldTerms;)\b"/>
<entity name="propertyAttributeURIs" value="(?{}%coreSyntaxTerms;|li|Description|%oldTerms;)\b"/>
<scheme name="nodeElementURIs-group">
<regexp region5="subjectOutlined" match="/\M (&lt; (%xml:NCName;:)?%xml:Name;\b\s*.*?%nsprefix;about\s*=\s*(([\x22\x27])(.*?)(\4)) )/x"/>
<inherit scheme="nodeElementURIs-group-old"/>
<inherit scheme="rdfs:nodeElementURIs-group"/>
<!-- todo: rdfs -->
<regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%nodeElementURIs; ([\s\/&gt;]|$) )/x"/>
<block end="/ &gt; /x" start="/\M &lt; ((%xml:NCName;:)?%xml:Name;\b ([\s\/&gt;]|$) )/x" scheme="nodeElement-mixedContent"/>
<!--
     <regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x"/>
     <inherit scheme="xml:element"/>
    -->
</scheme>
<scheme name="nodeElement-mixedContent">
<inherit scheme="xml:elementContent">
<virtual subst-scheme="nodeElement-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="nodeElement-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="propertyElementURIs-group">
<!-- parseType choice -->
<block end="/ &gt; /x" start="/\M &lt; ((%xml:NCName;:)?%xml:Name;\b [^&gt;]+        %nsprefix;parseType\s*=\s*['&quot;]Literal\b [^&gt;]+        ([\s\/&gt;]|$) )/x" scheme="parseTypeLiteralPropertyElt-mixedContent"/>
<block end="/ &gt; /x" start="/\M &lt; ((%xml:NCName;:)?%xml:Name;\b [^&gt;]+        %nsprefix;parseType\s*=\s*['&quot;]Resource\b [^&gt;]+        ([\s\/&gt;]|$) )/x" scheme="parseTypeResourcePropertyElt-mixedContent"/>
<block end="/ &gt; /x" start="/\M &lt; ((%xml:NCName;:)?%xml:Name;\b [^&gt;]+        %nsprefix;parseType\s*=\s*['&quot;]Collection\b [^&gt;]+        ([\s\/&gt;]|$) )/x" scheme="parseTypeCollectionPropertyElt-mixedContent"/>
<block end="/ &gt; /x" start="/\M &lt; ((%xml:NCName;:)?%xml:Name;\b [^&gt;]+        %nsprefix;parseType\s*= [^&gt;]*       ([\s\/&gt;]|$) )/x" scheme="parseTypeOtherPropertyElt-mixedContent"/>
<!-- defined items and errors -->
<inherit scheme="propertyElementURIs-group-old"/>
<inherit scheme="rdfs:propertyElementURIs-group"/>
<!-- todo: rdfs -->
<regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%propertyElementURIs; ([\s\/&gt;]|$) )/x"/>
<!-- other -->
<block end="/ &gt; /x" start="/\M &lt; ((%xml:NCName;:)?%xml:Name;\b ([\s\/&gt;]|$) )/x" scheme="propertyElt-mixedContent"/>
</scheme>
<scheme name="propertyElt-mixedContent">
<inherit scheme="xml:elementContent">
<virtual subst-scheme="propertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="propertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="propertyElt-content">
<inherit scheme="resourcePropertyElt-content"/>
<inherit scheme="literalPropertyElt-content"/>
<inherit scheme="emptyPropertyElt-content"/>
</scheme>
<scheme name="literalPropertyElt-content">
<inherit scheme="xml:content">
<virtual subst-scheme="def:empty" scheme="xml:element"/>
</inherit>
<inherit scheme="xmlschema:string-content"/>
</scheme>
<entity name="_hack_rdf" value="Seq|Bag|Alt|Statement|Property|XMLLiteral|List|subject|predicate|object|type|value|first|rest|li|_\d+"/>
<entity name="_hack_rdfs" value="subClassOf|subPropertyOf|domain|range|label|comment|member|seeAlso|isDefinedBy"/>
<scheme name="_hack_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" start="/~( (&lt;) (  ((RDF|rdfs?) (:) )         (%_hack_rdf;|%_hack_rdfs;)\b         ) \M &gt;? )/x" end="/( (&lt;\/) (\y3\b)?=         ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                           | (\/ \M &gt;) )/x"/>
<!--
    <regexp region="def:Error" match="/~&lt; (%ns-real-prefix;%propertyElementURIs; ([\s\/&gt;]|$) )/x"/>-->
<inherit scheme="xml:elementContent"/>
</scheme>
<scheme name="parseTypeLiteralPropertyElt-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="parseTypeOtherPropertyElt-content">
<inherit scheme="parseTypeLiteralPropertyElt-content"/>
</scheme>
<scheme name="parseTypeLiteralPropertyElt-mixedContent">
<inherit scheme="_hack_elementContent">
<virtual subst-scheme="parseTypeLiteralPropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="parseTypeLiteralPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeResourcePropertyElt-mixedContent">
<inherit scheme="_hack_elementContent">
<virtual subst-scheme="parseTypeResourcePropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="parseTypeResourcePropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeCollectionPropertyElt-mixedContent">
<inherit scheme="_hack_elementContent">
<virtual subst-scheme="parseTypeCollectionPropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="parseTypeCollectionPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeOtherPropertyElt-mixedContent">
<inherit scheme="_hack_elementContent">
<virtual subst-scheme="parseTypeOtherPropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="parseTypeOtherPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="propertyAttr-attributeGroup">
<inherit scheme="rdfOtherAttr-attributeGroup"/>
<inherit scheme="rdfs:propertyAttributeURIs-attributeGroup"/>
<regexp match="/(\s?#1|^)%nsprefix;%propertyAttributeURIs;([\s\=]|$)/x" region="def:Error"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="parseTypeAttr-content">
<regexp region="Enumeration" match="/\b(Resource|Literal|Collection)\b/"/>
<inherit scheme="xmlschema:QName-content"/>
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="containerElements-prop-group">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;_\d+ ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
</scheme>
<scheme name="containerElements-node-group">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;_\d+ ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
</scheme>
<scheme name="containerAttr-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%nsprefix;)(_\d+)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<!--end custom-->
<scheme name="RDF-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;RDF ([\s\/&gt;]|$) )/x" scheme="_hrc_int_N10010-elementContent"/>
</scheme>
<scheme name="Description-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Description ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
</scheme>
<scheme name="nil-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;nil ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
</scheme>
<scheme name="nodeElementURIs-group-old">
<inherit scheme="Description-element"/>
<inherit scheme="nil-element"/>
<inherit scheme="rdfOtherElements-node-group"/>
</scheme>
<scheme name="li-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;li ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
</scheme>
<scheme name="propertyElementURIs-group-old">
<inherit scheme="li-element"/>
<inherit scheme="rdfOtherElements-prop-group"/>
</scheme>
<scheme name="about-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(about)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
</scheme>
<scheme name="resource-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(resource)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
</scheme>
<scheme name="datatype-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(datatype)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
</scheme>
<scheme name="ID-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(ID)\M([\s\=]|$)/x" scheme="xmlschema:ID-AttributeContent"/>
</scheme>
<scheme name="nodeID-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(nodeID)\M([\s\=]|$)/x" scheme="xmlschema:ID-AttributeContent"/>
</scheme>
<scheme name="parseType-attribute">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(parseType)\M([\s\=]|$)/x" scheme="parseTypeAttr-AttributeContent"/>
</scheme>
<scheme name="propertyAttr-attributeGroup-old">
<inherit scheme="rdfOtherAttr-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="containerElements-prop-group-old">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;_1 ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
</scheme>
<scheme name="containerElements-node-group-old">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;_1 ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
</scheme>
<scheme name="containerAttr-attributeGroup-old">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(_1)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<scheme name="rdfOtherElements-node-group">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Seq ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Bag ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Alt ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Statement ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Property ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;XMLLiteral ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;List ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;subject ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;predicate ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;object ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;type ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;value ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;first ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;rest ([\s\/&gt;]|$) )/x" scheme="nodeElement-elementContent"/>
<inherit scheme="containerElements-node-group"/>
</scheme>
<scheme name="rdfOtherElements-prop-group">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Seq ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Bag ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Alt ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Statement ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;Property ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;XMLLiteral ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;List ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;subject ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;predicate ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;object ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;type ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;value ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;first ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;rest ([\s\/&gt;]|$) )/x" scheme="propertyElt-elementContent"/>
<inherit scheme="containerElements-prop-group"/>
</scheme>
<scheme name="rdfOtherAttr-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(Seq)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(Bag)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(Alt)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(Statement)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(Property)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(XMLLiteral)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(List)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(subject)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(predicate)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(object)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(type)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(value)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(first)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(?{Attribute.nsprefix}%attr-nsprefix;)(rest)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="containerAttr-attributeGroup"/>
</scheme>
<!--
        parent: RDF
-->
<scheme name="_hrc_int_N10010-content">
<inherit scheme="nodeElementURIs-group"/>
</scheme>
<scheme name="_hrc_int_N10010-content-error">
<inherit scheme="_hrc_int_N10010-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10010-content-cdsect">
<inherit scheme="_hrc_int_N10010-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="_hrc_int_N10010-Attributes"/>
<scheme name="_hrc_int_N10010-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="_hrc_int_N10010-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="_hrc_int_N10010-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="nodeElement-content">
<inherit scheme="propertyElementURIs-group"/>
</scheme>
<scheme name="nodeElement-content-error">
<inherit scheme="nodeElement-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="nodeElement-content-cdsect">
<inherit scheme="nodeElement-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="nodeElement-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="nodeID-attribute"/>
<inherit scheme="about-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="nodeElement-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="nodeElement-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="nodeElement-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="propertyElt-content-old"/>
<scheme name="propertyElt-content-error">
<inherit scheme="propertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="propertyElt-content-cdsect">
<inherit scheme="propertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="propertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="datatype-attribute"/>
<inherit scheme="nodeID-attribute"/>
<inherit scheme="parseType-attribute"/>
<inherit scheme="resource-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="propertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="propertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="propertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="resourcePropertyElt-content">
<inherit scheme="nodeElementURIs-group"/>
</scheme>
<scheme name="resourcePropertyElt-content-error">
<inherit scheme="resourcePropertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="resourcePropertyElt-content-cdsect">
<inherit scheme="resourcePropertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="resourcePropertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="resourcePropertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="resourcePropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="resourcePropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="literalPropertyElt-content-old">
<inherit scheme="xmlschema:string-content"/>
</scheme>
<scheme name="literalPropertyElt-content-error">
<inherit scheme="literalPropertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="literalPropertyElt-content-cdsect">
<inherit scheme="literalPropertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="literalPropertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="datatype-attribute"/>
<inherit scheme="parseType-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="literalPropertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="literalPropertyElt-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="literalPropertyElt-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="literalPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeLiteralPropertyElt-content-old">
<regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="parseTypeLiteralPropertyElt-content-error">
<inherit scheme="parseTypeLiteralPropertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="parseTypeLiteralPropertyElt-content-cdsect">
<inherit scheme="parseTypeLiteralPropertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="parseTypeLiteralPropertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="parseType-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="parseTypeLiteralPropertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="parseTypeLiteralPropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="parseTypeLiteralPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeResourcePropertyElt-content">
<inherit scheme="propertyElementURIs-group"/>
</scheme>
<scheme name="parseTypeResourcePropertyElt-content-error">
<inherit scheme="parseTypeResourcePropertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="parseTypeResourcePropertyElt-content-cdsect">
<inherit scheme="parseTypeResourcePropertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="parseTypeResourcePropertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="parseType-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="parseTypeResourcePropertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="parseTypeResourcePropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="parseTypeResourcePropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeCollectionPropertyElt-content">
<inherit scheme="nodeElementURIs-group"/>
</scheme>
<scheme name="parseTypeCollectionPropertyElt-content-error">
<inherit scheme="parseTypeCollectionPropertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="parseTypeCollectionPropertyElt-content-cdsect">
<inherit scheme="parseTypeCollectionPropertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="parseTypeCollectionPropertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="parseType-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="parseTypeCollectionPropertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="parseTypeCollectionPropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="parseTypeCollectionPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeOtherPropertyElt-content-old">
<regexp region="def:Error" match="/ &lt; (%ns-real-prefix;%xml:NCName; ([\s\/&gt;]|$) )/x"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="parseTypeOtherPropertyElt-content-error">
<inherit scheme="parseTypeOtherPropertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="parseTypeOtherPropertyElt-content-cdsect">
<inherit scheme="parseTypeOtherPropertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="parseTypeOtherPropertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="parseType-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="parseTypeOtherPropertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="parseTypeOtherPropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="parseTypeOtherPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="emptyPropertyElt-content"/>
<scheme name="emptyPropertyElt-content-error">
<inherit scheme="emptyPropertyElt-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="emptyPropertyElt-content-cdsect">
<inherit scheme="emptyPropertyElt-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="emptyPropertyElt-Attributes">
<inherit scheme="ID-attribute"/>
<inherit scheme="resource-attribute"/>
<inherit scheme="nodeID-attribute"/>
<inherit scheme="propertyAttr-attributeGroup"/>
</scheme>
<scheme name="emptyPropertyElt-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="emptyPropertyElt-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="emptyPropertyElt-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="parseTypeAttr-content-old">
<regexp region="Enumeration" match="/Resource/"/>
<regexp region="Enumeration" match="/Literal/"/>
<regexp region="Enumeration" match="/Collection/"/>
</scheme>
<scheme name="parseTypeAttr-content-error">
<inherit scheme="parseTypeAttr-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="parseTypeAttr-content-cdsect">
<inherit scheme="parseTypeAttr-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="parseTypeAttr-Attributes"/>
<scheme name="parseTypeAttr-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="parseTypeAttr-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="parseTypeAttr-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="parseTypeAttr-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="parseTypeAttr-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="parseTypeAttr-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>

<scheme name="rdf-root">
<annotation>
<documentation>
               You can replace these elements with needed single root element
               with customizing HRC generation process.
              </documentation>
</annotation>
<inherit scheme="RDF-element"/>
<inherit scheme="Description-element"/>
<inherit scheme="nil-element"/>
<inherit scheme="li-element"/>
<inherit scheme="xml:element">
<virtual subst-scheme="rdf-root" scheme="xml:element"/>
</inherit>
</scheme>
<scheme name="rdf-root-addref">
<inherit scheme="rdf-root"/>
</scheme>
<scheme name="rdf">
<inherit scheme="xml:singleroot">
<virtual subst-scheme="rdf-root-addref" scheme="xml:element"/>
</inherit>
</scheme>
</type>
</hrc>
