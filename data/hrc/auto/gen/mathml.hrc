<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hrc PUBLIC "-//Cail Lomecb//DTD Colorer HRC take5//EN" "http://colorer.sf.net/2003/hrc.dtd">
<hrc xmlns="http://colorer.sf.net/2003/hrc" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd" version="take5">
<!--
  insert this define into HRC base catalog file (colorer.hrc)

  <prototype name="mathml" group="group" description="mathml" targetNamespace="http://www.w3.org/1998/Math/MathML">
    <location link="mathml.hrc"/>
    <filename>/\./ix</filename>
  </prototype>
--><type name="mathml">
<annotation>
<documentation>
           XSLT Generated HRC scheme for language 'mathml'
           from XML Schema with xsd2hrc.xsl version 0.9.4 
            Copyright (C) 2002-04 Cail Lomecb
            Portions copyright (C) 2004-06 Eugene Efremov

           Scheme parameters:
             targetNamespace             : http://www.w3.org/1998/Math/MathML
             hrctype                     : mathml
             allow-common-attr           : yes
             allow-any-attr              : yes
             allow-unknown-elements      : yes
             allow-unknown-root-elements : no
             force-single-root           : yes
             default prefixes            : (?{}(?{}mathml|math|mml|m)(?{}:))?
               you can change them with entity 'nsprefix'
             
             </documentation>
<documentation>
          Schema documentation:
  This is an XML Schema for MathML.
  Author: St√©phane Dalmas, INRIA.
  </documentation>
<contributors><![CDATA[None]]></contributors>
</annotation>
<import type="def"/>
<region parent="xml:element.defined.start.name" name="element.start.name"/>
<region parent="xml:element.defined.end.name" name="element.end.name"/>
<region parent="xml:element.start.lt" name="element.start.lt"/>
<region parent="xml:element.start.gt" name="element.start.gt"/>
<region parent="xml:element.end.lt" name="element.end.lt"/>
<region parent="xml:element.end.gt" name="element.end.gt"/>
<region parent="element.start.name" name="element.nsprefix"/>
<region parent="xml:element.nscolon" name="element.nscolon"/>
<region parent="xml:Attribute.defined.name" name="Attribute.name"/>
<region parent="xml:Attribute.nsprefix" name="Attribute.nsprefix"/>
<region parent="xml:Attribute.nscolon" name="Attribute.nscolon"/>
<region parent="xml:AttValue.defined" name="AttValue"/>
<region parent="xml:AttValue.defined.start" name="AttValue.start"/>
<region parent="xml:AttValue.defined.end" name="AttValue.end"/>
<region description="Enumerated type values" parent="xml:Enumeration" name="Enumeration"/>
<region description="" name="mathOutlined" parent="def:Outlined"/>
<entity value="(?{}(?{}mathml|math|mml|m)(?{}:))" name="ns-real-prefix"/>
<entity value="(?{}(?{}mathml|math|mml|m)(?{}:))?" name="nsprefix"/>
<entity value="(?{}(?{}mathml|math|mml|m)(?{Attribute.nscolon}:))" name="attr-nsprefix"/>
<scheme name="_hrc_int_elementContent">
<block scheme="xml:elementContent2" region19="element.start.gt" region18="element.end.gt" region17="element.end.name" region16="element.nscolon" region15="element.nsprefix" region12="element.end.lt" region11="PairEnd" region07="element.start.name" region06="element.nscolon" region05="element.nsprefix" region02="element.start.lt" region01="PairStart" end="/( (&lt;\/) (\y3\b)?= ( (%xml:NCName;) (:) )? (%xml:Name;) \b \M \s* (&gt;?)                   | (\/ \M &gt;) )/x" start="/~( (&lt;) (  ((%xml:NCName;) (:) )? (%xml:Name;) ) \M &gt;?   )/x"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_AttValue">
<block region="AttValue" scheme="xml:AttValue.content.quot" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(&quot;)/"/>
<block region="AttValue" scheme="xml:AttValue.content.apos" region11="AttValue.end" region01="AttValue.start" region10="PairEnd" region00="PairStart" end="/(\y1)/" start="/(')/"/>
</scheme>
<scheme name="AttributeContent">
<inherit scheme="xml:AttributeContent">
<virtual subst-scheme="_hrc_int_AttValue" scheme="xml:AttValue"/>
</inherit>
</scheme>
<!--custom schemes from '../../src/hrc/mathml/src/custom.mathml.xml'-->
<!--end custom-->
<!--START INCLUDING FILE: common/math.xsd-->
<scheme name="Presentation-expr.class-group">
<inherit scheme="PresExpr.class-group"/>
<inherit scheme="ContExpr.class-group"/>
</scheme>
<scheme name="Content-expr.class-group">
<inherit scheme="ContExpr.class-group"/>
<inherit scheme="PresExpr.class-group"/>
</scheme>
<scheme name="PresExpr.class-group">
<inherit scheme="Presentation-token.class-group"/>
<inherit scheme="Presentation-layout.class-group"/>
<inherit scheme="Presentation-script.class-group"/>
<inherit scheme="Presentation-table.class-group"/>
<inherit scheme="mspace-element"/>
<inherit scheme="maction-element"/>
<inherit scheme="merror-element"/>
<inherit scheme="mstyle-element"/>
</scheme>
<scheme name="ContExpr.class-group">
<inherit scheme="Content-tokens.class-group"/>
<inherit scheme="Content-arith.class-group"/>
<inherit scheme="Content-functions.class-group"/>
<inherit scheme="Content-logic.class-group"/>
<inherit scheme="Content-constants.class-group"/>
<inherit scheme="Content-sets.class-group"/>
<inherit scheme="Content-relations.class-group"/>
<inherit scheme="Content-elementary-functions.class-group"/>
<inherit scheme="Content-calculus.class-group"/>
<inherit scheme="Content-linear-algebra.class-group"/>
<inherit scheme="Content-vector-calculus.class-group"/>
<inherit scheme="Content-statistics.class-group"/>
<inherit scheme="Content-constructs.class-group"/>
<inherit scheme="semantics-element"/>
</scheme>
<scheme name="Browser-interface.attrib-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(baseline)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(overflow)\M([\s\=]|$)/x" scheme="_hrc_int_N50055-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(altimg)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(alttext)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(name)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(height)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(width)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<scheme name="math.attlist-attributeGroup">
<inherit scheme="Browser-interface.attrib-attributeGroup"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(macros)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(display)\M([\s\=]|$)/x" scheme="_hrc_int_N5007D-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="math.content-group">
<inherit scheme="PresExpr.class-group"/>
<inherit scheme="ContExpr.class-group"/>
</scheme>
<scheme name="math-element">
<regexp region1="mathOutlined" match="/\M (&lt; %nsprefix;math \b.*? (&gt;|$) )/x"/>
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;math ([\s\/&gt;]|$) )/x" scheme="math.type-elementContent"/>
</scheme>
<!--
        parent: overflow
-->
<scheme name="_hrc_int_N50055-content">
<regexp region="Enumeration" match="/scroll/"/>
<regexp region="Enumeration" match="/elide/"/>
<regexp region="Enumeration" match="/truncate/"/>
<regexp region="Enumeration" match="/scale/"/>
</scheme>
<scheme name="_hrc_int_N50055-content-error">
<inherit scheme="_hrc_int_N50055-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N50055-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N50055-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N50055-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: display
-->
<scheme name="_hrc_int_N5007D-content">
<regexp region="Enumeration" match="/block/"/>
<regexp region="Enumeration" match="/inline/"/>
</scheme>
<scheme name="_hrc_int_N5007D-content-error">
<inherit scheme="_hrc_int_N5007D-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N5007D-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N5007D-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N5007D-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="math.type-content">
<inherit scheme="math.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="math.type-content-error">
<inherit scheme="math.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="math.type-content-cdsect">
<inherit scheme="math.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="math.type-Attributes">
<inherit scheme="math.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="math.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="math.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="math.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: common/math.xsd-->
<!--START INCLUDING FILE: common/common-attribs.xsd-->
<scheme name="Common.attrib-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(class)\M([\s\=]|$)/x" scheme="xmlschema:NMTOKENS-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(style)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(xref)\M([\s\=]|$)/x" scheme="xmlschema:IDREF-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(id)\M([\s\=]|$)/x" scheme="xmlschema:ID-AttributeContent"/>
<inherit scheme="xlink:href-attribute"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<!--END   INCLUDING FILE: common/common-attribs.xsd-->
<!--START INCLUDING FILE: presentation/common-types.xsd-->
<!--
  This is an XML Schema module containing some type definitions for MathML.
  Author: St√©phane Dalmas, INRIA.
  
-->
<scheme name="simple-size-content">
<regexp region="Enumeration" match="/small/"/>
<regexp region="Enumeration" match="/normal/"/>
<regexp region="Enumeration" match="/big/"/>
</scheme>
<scheme name="simple-size-content-error">
<inherit scheme="simple-size-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="simple-size-content-cdsect">
<inherit scheme="simple-size-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="simple-size-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="simple-size-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="simple-size-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="simple-size-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="simple-size-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="simple-size-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="simple-size-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="centering-content">
<regexp region="Enumeration" match="/left/"/>
<regexp region="Enumeration" match="/center/"/>
<regexp region="Enumeration" match="/right/"/>
</scheme>
<scheme name="centering-content-error">
<inherit scheme="centering-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="centering-content-cdsect">
<inherit scheme="centering-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="centering-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="centering-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="centering-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="centering-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="centering-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="centering-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="centering-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="named-space-content">
<regexp region="Enumeration" match="/veryverythinmathspace/"/>
<regexp region="Enumeration" match="/verythinmathspace/"/>
<regexp region="Enumeration" match="/thinmathspace/"/>
<regexp region="Enumeration" match="/mediummathspace/"/>
<regexp region="Enumeration" match="/thickmathspace/"/>
<regexp region="Enumeration" match="/verythickmathspace/"/>
<regexp region="Enumeration" match="/veryverythickmathspace/"/>
</scheme>
<scheme name="named-space-content-error">
<inherit scheme="named-space-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="named-space-content-cdsect">
<inherit scheme="named-space-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="named-space-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="named-space-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="named-space-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="named-space-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="named-space-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="named-space-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="named-space-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="thickness-content">
<regexp region="Enumeration" match="/thin/"/>
<regexp region="Enumeration" match="/medium/"/>
<regexp region="Enumeration" match="/thick/"/>
</scheme>
<scheme name="thickness-content-error">
<inherit scheme="thickness-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="thickness-content-cdsect">
<inherit scheme="thickness-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="thickness-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="thickness-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="thickness-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="thickness-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="thickness-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="thickness-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="thickness-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="length-with-unit-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: (-?([0-9]+|[0-9]*\.[0-9]+)*(em|ex|px|in|cm|mm|pt|pc|%))|0-->
<regexp priority="low" region="Enumeration" match="/(-?([0-9]+|[0-9]*\.[0-9]+)*(em|ex|px|in|cm|mm|pt|pc|\%))|0/"/>
</scheme>
<scheme name="length-with-unit-content-error">
<inherit scheme="length-with-unit-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="length-with-unit-content-cdsect">
<inherit scheme="length-with-unit-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="length-with-unit-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="length-with-unit-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="length-with-unit-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="length-with-unit-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="length-with-unit-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="length-with-unit-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="length-with-unit-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="length-with-optional-unit-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: -?([0-9]+|[0-9]*\.[0-9]+)*(em|ex|px|in|cm|mm|pt|pc|%)?-->
<regexp priority="low" region="Enumeration" match="/-?([0-9]+|[0-9]*\.[0-9]+)*(em|ex|px|in|cm|mm|pt|pc|\%)?/"/>
</scheme>
<scheme name="length-with-optional-unit-content-error">
<inherit scheme="length-with-optional-unit-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="length-with-optional-unit-content-cdsect">
<inherit scheme="length-with-optional-unit-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="length-with-optional-unit-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="length-with-optional-unit-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="length-with-optional-unit-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="length-with-optional-unit-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="length-with-optional-unit-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="length-with-optional-unit-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="length-with-optional-unit-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="infinity-content">
<regexp region="Enumeration" match="/infinity/"/>
</scheme>
<scheme name="infinity-content-error">
<inherit scheme="infinity-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="infinity-content-cdsect">
<inherit scheme="infinity-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="infinity-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="infinity-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="infinity-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="infinity-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="infinity-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="infinity-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="infinity-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="RGB-color-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: #(([0-9]|[a-f]){3}|([0-9]|[a-f]){6})-->
<regexp priority="low" region="Enumeration" match="/\#(([0-9]|[a-f]){3}|([0-9]|[a-f]){6})/"/>
</scheme>
<scheme name="RGB-color-content-error">
<inherit scheme="RGB-color-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="RGB-color-content-cdsect">
<inherit scheme="RGB-color-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="RGB-color-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="RGB-color-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="RGB-color-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="RGB-color-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="RGB-color-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="RGB-color-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="RGB-color-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/common-types.xsd-->
<!--START INCLUDING FILE: presentation/common-attribs.xsd-->
<scheme name="Token-style.attrib-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mathvariant)\M([\s\=]|$)/x" scheme="_hrc_int_N10000F-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mathsize)\M([\s\=]|$)/x" scheme="_hrc_int_N100030-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mathcolor)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mathbackground)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<scheme name="Operator.attrib-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(form)\M([\s\=]|$)/x" scheme="_hrc_int_N100040-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lspace)\M([\s\=]|$)/x" scheme="_hrc_int_N10004C-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rspace)\M([\s\=]|$)/x" scheme="_hrc_int_N100052-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(fence)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(separator)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(stretchy)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(symmetric)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(movablelimits)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(accent)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(largeop)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(minsize)\M([\s\=]|$)/x" scheme="_hrc_int_N100073-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(maxsize)\M([\s\=]|$)/x" scheme="_hrc_int_N100078-AttributeContent"/>
</scheme>
<!--
        parent: mathvariant
-->
<scheme name="_hrc_int_N10000F-content">
<regexp region="Enumeration" match="/normal/"/>
<regexp region="Enumeration" match="/bold/"/>
<regexp region="Enumeration" match="/italic/"/>
<regexp region="Enumeration" match="/bold-italic/"/>
<regexp region="Enumeration" match="/double-struck/"/>
<regexp region="Enumeration" match="/bold-fraktur/"/>
<regexp region="Enumeration" match="/script/"/>
<regexp region="Enumeration" match="/bold-script/"/>
<regexp region="Enumeration" match="/fraktur/"/>
<regexp region="Enumeration" match="/sans-serif/"/>
<regexp region="Enumeration" match="/bold-sans-serif/"/>
<regexp region="Enumeration" match="/sans-serif-italic/"/>
<regexp region="Enumeration" match="/sans-serif-bold-italic/"/>
<regexp region="Enumeration" match="/monospace/"/>
</scheme>
<scheme name="_hrc_int_N10000F-content-error">
<inherit scheme="_hrc_int_N10000F-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10000F-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10000F-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N10000F-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: mathsize
-->
<scheme name="_hrc_int_N100030-content">
<!--union:-->
<inherit scheme="simple-size-content"/>
<inherit scheme="length-with-unit-content"/>
</scheme>
<scheme name="_hrc_int_N100030-content-error">
<inherit scheme="_hrc_int_N100030-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100030-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100030-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N100030-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: form
-->
<scheme name="_hrc_int_N100040-content">
<regexp region="Enumeration" match="/prefix/"/>
<regexp region="Enumeration" match="/infix/"/>
<regexp region="Enumeration" match="/postfix/"/>
</scheme>
<scheme name="_hrc_int_N100040-content-error">
<inherit scheme="_hrc_int_N100040-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100040-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100040-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N100040-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: lspace
-->
<scheme name="_hrc_int_N10004C-content">
<!--union:-->
<inherit scheme="length-with-unit-content"/>
<inherit scheme="named-space-content"/>
</scheme>
<scheme name="_hrc_int_N10004C-content-error">
<inherit scheme="_hrc_int_N10004C-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N10004C-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N10004C-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N10004C-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: rspace
-->
<scheme name="_hrc_int_N100052-content">
<!--union:-->
<inherit scheme="length-with-unit-content"/>
<inherit scheme="named-space-content"/>
</scheme>
<scheme name="_hrc_int_N100052-content-error">
<inherit scheme="_hrc_int_N100052-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100052-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100052-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N100052-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: minsize
-->
<scheme name="_hrc_int_N100073-content">
<!--union:-->
<inherit scheme="length-with-unit-content"/>
<inherit scheme="named-space-content"/>
</scheme>
<scheme name="_hrc_int_N100073-content-error">
<inherit scheme="_hrc_int_N100073-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100073-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100073-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N100073-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: maxsize
-->
<scheme name="_hrc_int_N100078-content">
<!--union:-->
<inherit scheme="length-with-unit-content"/>
<inherit scheme="named-space-content"/>
<inherit scheme="infinity-content"/>
<inherit scheme="xmlschema:float-content"/>
</scheme>
<scheme name="_hrc_int_N100078-content-error">
<inherit scheme="_hrc_int_N100078-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N100078-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N100078-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N100078-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/common-attribs.xsd-->
<!--START INCLUDING FILE: presentation/characters.xsd-->
<scheme name="mglyph.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(alt)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(fontfamily)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(index)\M([\s\=]|$)/x" scheme="xmlschema:positiveInteger-AttributeContent"/>
</scheme>
<scheme name="mglyph-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mglyph ([\s\/&gt;]|$) )/x" scheme="mglyph.type-elementContent"/>
</scheme>
<scheme name="mglyph.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mglyph.type-content-error">
<inherit scheme="mglyph.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mglyph.type-content-cdsect">
<inherit scheme="mglyph.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mglyph.type-Attributes">
<inherit scheme="mglyph.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mglyph.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mglyph.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mglyph.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/characters.xsd-->
<!--START INCLUDING FILE: presentation/tokens.xsd-->
<scheme name="Glyph-alignmark.class-group">
<inherit scheme="malignmark-element"/>
<inherit scheme="mglyph-element"/>
</scheme>
<scheme name="mi.attlist-attributeGroup">
<inherit scheme="Token-style.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mi-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mi ([\s\/&gt;]|$) )/x" scheme="mi.type-elementContent"/>
</scheme>
<scheme name="mo.attlist-attributeGroup">
<inherit scheme="Operator.attrib-attributeGroup"/>
<inherit scheme="Token-style.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mo-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mo ([\s\/&gt;]|$) )/x" scheme="mo.type-elementContent"/>
</scheme>
<scheme name="mn.attlist-attributeGroup">
<inherit scheme="Token-style.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mn-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mn ([\s\/&gt;]|$) )/x" scheme="mn.type-elementContent"/>
</scheme>
<scheme name="mtext.attlist-attributeGroup">
<inherit scheme="Token-style.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mtext-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mtext ([\s\/&gt;]|$) )/x" scheme="mtext.type-elementContent"/>
</scheme>
<scheme name="ms.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lquote)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rquote)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="Token-style.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="ms-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;ms ([\s\/&gt;]|$) )/x" scheme="ms.type-elementContent"/>
</scheme>
<scheme name="Presentation-token.class-group">
<inherit scheme="mi-element"/>
<inherit scheme="mo-element"/>
<inherit scheme="mn-element"/>
<inherit scheme="mtext-element"/>
<inherit scheme="ms-element"/>
</scheme>
<scheme name="mi.type-content">
<inherit scheme="Glyph-alignmark.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mi.type-content-error">
<inherit scheme="mi.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mi.type-content-cdsect">
<inherit scheme="mi.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mi.type-Attributes">
<inherit scheme="mi.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mi.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mi.type-content" scheme="xml:element"/>
<virtual subst-scheme="mi.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mo.type-content">
<inherit scheme="Glyph-alignmark.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mo.type-content-error">
<inherit scheme="mo.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mo.type-content-cdsect">
<inherit scheme="mo.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mo.type-Attributes">
<inherit scheme="mo.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mo.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mo.type-content" scheme="xml:element"/>
<virtual subst-scheme="mo.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mn.type-content">
<inherit scheme="Glyph-alignmark.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mn.type-content-error">
<inherit scheme="mn.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mn.type-content-cdsect">
<inherit scheme="mn.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mn.type-Attributes">
<inherit scheme="mi.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mn.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mn.type-content" scheme="xml:element"/>
<virtual subst-scheme="mn.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mtext.type-content">
<inherit scheme="Glyph-alignmark.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mtext.type-content-error">
<inherit scheme="mtext.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mtext.type-content-cdsect">
<inherit scheme="mtext.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mtext.type-Attributes">
<inherit scheme="mtext.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mtext.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mtext.type-content" scheme="xml:element"/>
<virtual subst-scheme="mtext.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="ms.type-content">
<inherit scheme="Glyph-alignmark.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="ms.type-content-error">
<inherit scheme="ms.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="ms.type-content-cdsect">
<inherit scheme="ms.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="ms.type-Attributes">
<inherit scheme="ms.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="ms.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="ms.type-content" scheme="xml:element"/>
<virtual subst-scheme="ms.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/tokens.xsd-->
<!--START INCLUDING FILE: presentation/scripts.xsd-->
<scheme name="msub.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(subscriptshift)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="msub-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;msub ([\s\/&gt;]|$) )/x" scheme="msub.type-elementContent"/>
</scheme>
<scheme name="msup.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(superscriptshift)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="msup-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;msup ([\s\/&gt;]|$) )/x" scheme="msup.type-elementContent"/>
</scheme>
<scheme name="msubsup.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(subscriptshift)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(superscriptshift)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="msubsup-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;msubsup ([\s\/&gt;]|$) )/x" scheme="msubsup.type-elementContent"/>
</scheme>
<scheme name="munder.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(accentunder)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="munder-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;munder ([\s\/&gt;]|$) )/x" scheme="munder.type-elementContent"/>
</scheme>
<scheme name="mover.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(accent)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mover-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mover ([\s\/&gt;]|$) )/x" scheme="mover.type-elementContent"/>
</scheme>
<scheme name="munderover.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(accent)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(accentunder)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="munderover-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;munderover ([\s\/&gt;]|$) )/x" scheme="munderover.type-elementContent"/>
</scheme>
<scheme name="mmultiscripts.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="Presentation-expr-or-none.class-group">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="none-element"/>
</scheme>
<scheme name="mmultiscripts.content-group">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="Presentation-expr-or-none.class-group"/>
<inherit scheme="mprescripts-element"/>
<inherit scheme="Presentation-expr-or-none.class-group"/>
</scheme>
<scheme name="mmultiscripts-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mmultiscripts ([\s\/&gt;]|$) )/x" scheme="mmultiscripts.type-elementContent"/>
</scheme>
<scheme name="none-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;none ([\s\/&gt;]|$) )/x" scheme="none.type-elementContent"/>
</scheme>
<scheme name="mprescripts-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mprescripts ([\s\/&gt;]|$) )/x" scheme="mprescripts.type-elementContent"/>
</scheme>
<scheme name="Presentation-script.class-group">
<inherit scheme="msub-element"/>
<inherit scheme="msup-element"/>
<inherit scheme="msubsup-element"/>
<inherit scheme="munder-element"/>
<inherit scheme="mover-element"/>
<inherit scheme="munderover-element"/>
<inherit scheme="mmultiscripts-element"/>
</scheme>
<scheme name="msub.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="msub.type-content-error">
<inherit scheme="msub.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="msub.type-content-cdsect">
<inherit scheme="msub.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="msub.type-Attributes">
<inherit scheme="msub.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="msub.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="msub.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="msub.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="msup.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="msup.type-content-error">
<inherit scheme="msup.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="msup.type-content-cdsect">
<inherit scheme="msup.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="msup.type-Attributes">
<inherit scheme="msup.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="msup.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="msup.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="msup.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="msubsup.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="msubsup.type-content-error">
<inherit scheme="msubsup.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="msubsup.type-content-cdsect">
<inherit scheme="msubsup.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="msubsup.type-Attributes">
<inherit scheme="msubsup.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="msubsup.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="msubsup.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="msubsup.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="munder.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="munder.type-content-error">
<inherit scheme="munder.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="munder.type-content-cdsect">
<inherit scheme="munder.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="munder.type-Attributes">
<inherit scheme="munder.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="munder.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="munder.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="munder.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mover.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mover.type-content-error">
<inherit scheme="mover.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mover.type-content-cdsect">
<inherit scheme="mover.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mover.type-Attributes">
<inherit scheme="mover.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mover.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mover.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mover.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="munderover.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="munderover.type-content-error">
<inherit scheme="munderover.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="munderover.type-content-cdsect">
<inherit scheme="munderover.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="munderover.type-Attributes">
<inherit scheme="munderover.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="munderover.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="munderover.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="munderover.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mmultiscripts.type-content">
<inherit scheme="mmultiscripts.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mmultiscripts.type-content-error">
<inherit scheme="mmultiscripts.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mmultiscripts.type-content-cdsect">
<inherit scheme="mmultiscripts.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mmultiscripts.type-Attributes">
<inherit scheme="mmultiscripts.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mmultiscripts.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mmultiscripts.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mmultiscripts.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="none.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="none.type-content-error">
<inherit scheme="none.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="none.type-content-cdsect">
<inherit scheme="none.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="none.type-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="none.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="none.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="none.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mprescripts.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mprescripts.type-content-error">
<inherit scheme="mprescripts.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mprescripts.type-content-cdsect">
<inherit scheme="mprescripts.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mprescripts.type-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mprescripts.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mprescripts.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mprescripts.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/scripts.xsd-->
<!--START INCLUDING FILE: presentation/space.xsd-->
<scheme name="mspace.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(width)\M([\s\=]|$)/x" scheme="_hrc_int_N1F000F-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(height)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(depth)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(linebreak)\M([\s\=]|$)/x" scheme="_hrc_int_N1F001D-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mspace-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mspace ([\s\/&gt;]|$) )/x" scheme="mspace.type-elementContent"/>
</scheme>
<!--
        parent: width
-->
<scheme name="_hrc_int_N1F000F-content">
<!--union:-->
<inherit scheme="length-with-unit-content"/>
<inherit scheme="named-space-content"/>
</scheme>
<scheme name="_hrc_int_N1F000F-content-error">
<inherit scheme="_hrc_int_N1F000F-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1F000F-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1F000F-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N1F000F-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: linebreak
-->
<scheme name="_hrc_int_N1F001D-content">
<regexp region="Enumeration" match="/auto/"/>
<regexp region="Enumeration" match="/newline/"/>
<regexp region="Enumeration" match="/indentingnewline/"/>
<regexp region="Enumeration" match="/nobreak/"/>
<regexp region="Enumeration" match="/goodbreak/"/>
<regexp region="Enumeration" match="/badbreak/"/>
</scheme>
<scheme name="_hrc_int_N1F001D-content-error">
<inherit scheme="_hrc_int_N1F001D-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N1F001D-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N1F001D-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N1F001D-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mspace.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mspace.type-content-error">
<inherit scheme="mspace.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mspace.type-content-cdsect">
<inherit scheme="mspace.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mspace.type-Attributes">
<inherit scheme="mspace.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mspace.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mspace.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mspace.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/space.xsd-->
<!--START INCLUDING FILE: presentation/layout.xsd-->
<scheme name="mrow.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mrow-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mrow ([\s\/&gt;]|$) )/x" scheme="mrow.type-elementContent"/>
</scheme>
<scheme name="mfrac.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(bevelled)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(denomalign)\M([\s\=]|$)/x" scheme="centering-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(numalign)\M([\s\=]|$)/x" scheme="centering-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(linethickness)\M([\s\=]|$)/x" scheme="_hrc_int_N20002B-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mfrac-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mfrac ([\s\/&gt;]|$) )/x" scheme="mfrac.type-elementContent"/>
</scheme>
<scheme name="msqrt.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="msqrt-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;msqrt ([\s\/&gt;]|$) )/x" scheme="msqrt.type-elementContent"/>
</scheme>
<scheme name="mroot.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mroot-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mroot ([\s\/&gt;]|$) )/x" scheme="mroot.type-elementContent"/>
</scheme>
<scheme name="mpadded.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(width)\M([\s\=]|$)/x" scheme="mpadded-width-space-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(lspace)\M([\s\=]|$)/x" scheme="mpadded-space-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(height)\M([\s\=]|$)/x" scheme="mpadded-space-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(depth)\M([\s\=]|$)/x" scheme="mpadded-space-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mpadded-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mpadded ([\s\/&gt;]|$) )/x" scheme="mpadded.type-elementContent"/>
</scheme>
<scheme name="mphantom.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mphantom-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mphantom ([\s\/&gt;]|$) )/x" scheme="mphantom.type-elementContent"/>
</scheme>
<scheme name="mfenced.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(open)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(close)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(separators)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mfenced-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mfenced ([\s\/&gt;]|$) )/x" scheme="mfenced.type-elementContent"/>
</scheme>
<scheme name="menclose.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(notation)\M([\s\=]|$)/x" scheme="_hrc_int_N2000B9-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="menclose-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;menclose ([\s\/&gt;]|$) )/x" scheme="menclose.type-elementContent"/>
</scheme>
<scheme name="Presentation-layout.class-group">
<inherit scheme="mrow-element"/>
<inherit scheme="mfrac-element"/>
<inherit scheme="msqrt-element"/>
<inherit scheme="mroot-element"/>
<inherit scheme="mpadded-element"/>
<inherit scheme="mphantom-element"/>
<inherit scheme="mfenced-element"/>
<inherit scheme="menclose-element"/>
</scheme>
<scheme name="mrow.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mrow.type-content-error">
<inherit scheme="mrow.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mrow.type-content-cdsect">
<inherit scheme="mrow.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mrow.type-Attributes">
<inherit scheme="mrow.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mrow.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mrow.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mrow.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: linethickness
-->
<scheme name="_hrc_int_N20002B-content">
<!--union:-->
<inherit scheme="length-with-optional-unit-content"/>
<inherit scheme="thickness-content"/>
</scheme>
<scheme name="_hrc_int_N20002B-content-error">
<inherit scheme="_hrc_int_N20002B-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N20002B-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N20002B-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N20002B-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mfrac.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mfrac.type-content-error">
<inherit scheme="mfrac.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mfrac.type-content-cdsect">
<inherit scheme="mfrac.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mfrac.type-Attributes">
<inherit scheme="mfrac.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mfrac.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mfrac.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mfrac.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="msqrt.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="msqrt.type-content-error">
<inherit scheme="msqrt.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="msqrt.type-content-cdsect">
<inherit scheme="msqrt.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="msqrt.type-Attributes">
<inherit scheme="msqrt.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="msqrt.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="msqrt.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="msqrt.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mroot.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mroot.type-content-error">
<inherit scheme="mroot.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mroot.type-content-cdsect">
<inherit scheme="mroot.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mroot.type-Attributes">
<inherit scheme="mroot.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mroot.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mroot.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mroot.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mpadded-space-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: (\+|-)?([0-9]+|[0-9]*\.[0-9]+)(((%?) *(width|lspace|height|depth))|(em|ex|px|in|cm|mm|pt|pc))-->
<regexp priority="low" region="Enumeration" match="/(\+|-)?([0-9]+|[0-9]*\.[0-9]+)(((\%?) *(width|lspace|height|depth))|(em|ex|px|in|cm|mm|pt|pc))/"/>
</scheme>
<scheme name="mpadded-space-content-error">
<inherit scheme="mpadded-space-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mpadded-space-content-cdsect">
<inherit scheme="mpadded-space-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mpadded-space-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mpadded-space-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="mpadded-space-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mpadded-space-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mpadded-space-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="mpadded-space-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="mpadded-space-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mpadded-width-space-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: ((\+|-)?([0-9]+|[0-9]*\.[0-9]+)(((%?) *(width|lspace|height|depth)?)|(width|lspace|height|depth)|(em|ex|px|in|cm|mm|pt|pc)))|((veryverythin|verythin|thin|medium|thick|verythick|veryverythick)mathspace)|0-->
<regexp priority="low" region="Enumeration" match="/((\+|-)?([0-9]+|[0-9]*\.[0-9]+)(((\%?) *(width|lspace|height|depth)?)|(width|lspace|height|depth)|(em|ex|px|in|cm|mm|pt|pc)))|((veryverythin|verythin|thin|medium|thick|verythick|veryverythick)mathspace)|0/"/>
</scheme>
<scheme name="mpadded-width-space-content-error">
<inherit scheme="mpadded-width-space-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mpadded-width-space-content-cdsect">
<inherit scheme="mpadded-width-space-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mpadded-width-space-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mpadded-width-space-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="mpadded-width-space-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mpadded-width-space-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mpadded-width-space-content-cdsect" scheme="xml:CDSect.content.stream"/>
<virtual subst-scheme="mpadded-width-space-content-error" scheme="xml:content.cdata.stream"/>
<virtual subst-scheme="def:empty" scheme="xml:element"/>
<virtual subst-scheme="mpadded-width-space-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mpadded.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mpadded.type-content-error">
<inherit scheme="mpadded.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mpadded.type-content-cdsect">
<inherit scheme="mpadded.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mpadded.type-Attributes">
<inherit scheme="mpadded.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mpadded.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mpadded.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mpadded.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mphantom.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mphantom.type-content-error">
<inherit scheme="mphantom.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mphantom.type-content-cdsect">
<inherit scheme="mphantom.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mphantom.type-Attributes">
<inherit scheme="mphantom.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mphantom.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mphantom.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mphantom.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mfenced.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mfenced.type-content-error">
<inherit scheme="mfenced.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mfenced.type-content-cdsect">
<inherit scheme="mfenced.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mfenced.type-Attributes">
<inherit scheme="mfenced.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mfenced.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mfenced.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mfenced.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: notation
-->
<scheme name="_hrc_int_N2000B9-content">
<regexp region="Enumeration" match="/actuarial/"/>
<regexp region="Enumeration" match="/longdiv/"/>
<regexp region="Enumeration" match="/radical/"/>
</scheme>
<scheme name="_hrc_int_N2000B9-content-error">
<inherit scheme="_hrc_int_N2000B9-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N2000B9-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N2000B9-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N2000B9-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="menclose.type-content">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="menclose.type-content-error">
<inherit scheme="menclose.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="menclose.type-content-cdsect">
<inherit scheme="menclose.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="menclose.type-Attributes">
<inherit scheme="menclose.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="menclose.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="menclose.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="menclose.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/layout.xsd-->
<!--START INCLUDING FILE: presentation/table.xsd-->
<scheme name="Table-alignment.attrib-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rowalign)\M([\s\=]|$)/x" scheme="_hrc_int_N250010-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(columnalign)\M([\s\=]|$)/x" scheme="_hrc_int_N250018-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(groupalign)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
</scheme>
<scheme name="mtr.attlist-attributeGroup">
<inherit scheme="Table-alignment.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mtr.content-group">
<inherit scheme="mtd-element"/>
</scheme>
<scheme name="mtr-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mtr ([\s\/&gt;]|$) )/x" scheme="mtr.type-elementContent"/>
</scheme>
<scheme name="mlabeledtr.attlist-attributeGroup">
<inherit scheme="Table-alignment.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mlabeledtr.content-group">
<inherit scheme="mtd-element"/>
</scheme>
<scheme name="mlabeledtr-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mlabeledtr ([\s\/&gt;]|$) )/x" scheme="mlabeledtr.type-elementContent"/>
</scheme>
<scheme name="mtd.attlist-attributeGroup">
<inherit scheme="Table-alignment.attrib-attributeGroup"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(columnspan)\M([\s\=]|$)/x" scheme="xmlschema:positiveInteger-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rowspan)\M([\s\=]|$)/x" scheme="xmlschema:positiveInteger-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mtd.content-group">
<inherit scheme="Presentation-expr.class-group"/>
</scheme>
<scheme name="mtd-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mtd ([\s\/&gt;]|$) )/x" scheme="mtd.type-elementContent"/>
</scheme>
<scheme name="mtable.attlist-attributeGroup">
<inherit scheme="Table-alignment.attrib-attributeGroup"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(align)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(alignmentscope)\M([\s\=]|$)/x" scheme="_hrc_int_N25007B-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(columnwidth)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(width)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rowspacing)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(columnspacing)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(rowlines)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(columnlines)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(frame)\M([\s\=]|$)/x" scheme="_hrc_int_N25009B-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(framespacing)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(equalrows)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(equalcolumns)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(displaystyle)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(side)\M([\s\=]|$)/x" scheme="_hrc_int_N2500B7-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(minlabelspacing)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mtable.content-group">
<inherit scheme="mtr-element"/>
<inherit scheme="mlabeledtr-element"/>
</scheme>
<scheme name="mtable-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mtable ([\s\/&gt;]|$) )/x" scheme="mtable.type-elementContent"/>
</scheme>
<scheme name="maligngroup.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(groupalign)\M([\s\=]|$)/x" scheme="_hrc_int_N2500DF-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="maligngroup-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;maligngroup ([\s\/&gt;]|$) )/x" scheme="maligngroup.type-elementContent"/>
</scheme>
<scheme name="malignmark.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(edge)\M([\s\=]|$)/x" scheme="_hrc_int_N2500F9-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="malignmark-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;malignmark ([\s\/&gt;]|$) )/x" scheme="malignmark.type-elementContent"/>
</scheme>
<scheme name="Presentation-table.class-group">
<inherit scheme="mtable-element"/>
<inherit scheme="maligngroup-element"/>
<inherit scheme="malignmark-element"/>
</scheme>
<!--
        parent: rowalign
-->
<scheme name="_hrc_int_N250010-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: (top|bottom|center|baseline|axis)( top| bottom| center| baseline| axis)*-->
<regexp priority="low" region="Enumeration" match="/(top|bottom|center|baseline|axis)( top| bottom| center| baseline| axis)*/"/>
</scheme>
<scheme name="_hrc_int_N250010-content-error">
<inherit scheme="_hrc_int_N250010-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N250010-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N250010-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N250010-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: columnalign
-->
<scheme name="_hrc_int_N250018-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: (left|center|right)( left| center| right)*-->
<regexp priority="low" region="Enumeration" match="/(left|center|right)( left| center| right)*/"/>
</scheme>
<scheme name="_hrc_int_N250018-content-error">
<inherit scheme="_hrc_int_N250018-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N250018-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N250018-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N250018-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mtr.type-content">
<inherit scheme="mtr.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mtr.type-content-error">
<inherit scheme="mtr.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mtr.type-content-cdsect">
<inherit scheme="mtr.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mtr.type-Attributes">
<inherit scheme="mtr.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mtr.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mtr.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mtr.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mlabeledtr.type-content">
<inherit scheme="mlabeledtr.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mlabeledtr.type-content-error">
<inherit scheme="mlabeledtr.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mlabeledtr.type-content-cdsect">
<inherit scheme="mlabeledtr.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mlabeledtr.type-Attributes">
<inherit scheme="mlabeledtr.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mlabeledtr.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mlabeledtr.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mlabeledtr.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mtd.type-content">
<inherit scheme="mtd.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mtd.type-content-error">
<inherit scheme="mtd.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mtd.type-content-cdsect">
<inherit scheme="mtd.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mtd.type-Attributes">
<inherit scheme="mtd.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mtd.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mtd.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mtd.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: alignmentscope
-->
<scheme name="_hrc_int_N25007B-content">
<!--
    Warning: RE pattern used. Possible compatibility faults
    Original RE: (true|false)( true| false)*-->
<regexp priority="low" region="Enumeration" match="/(true|false)( true| false)*/"/>
</scheme>
<scheme name="_hrc_int_N25007B-content-error">
<inherit scheme="_hrc_int_N25007B-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N25007B-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N25007B-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N25007B-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: frame
-->
<scheme name="_hrc_int_N25009B-content">
<regexp region="Enumeration" match="/none/"/>
<regexp region="Enumeration" match="/solid/"/>
<regexp region="Enumeration" match="/dashed/"/>
</scheme>
<scheme name="_hrc_int_N25009B-content-error">
<inherit scheme="_hrc_int_N25009B-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N25009B-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N25009B-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N25009B-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: side
-->
<scheme name="_hrc_int_N2500B7-content">
<regexp region="Enumeration" match="/left/"/>
<regexp region="Enumeration" match="/right/"/>
<regexp region="Enumeration" match="/leftoverlap/"/>
<regexp region="Enumeration" match="/rightoverlap/"/>
</scheme>
<scheme name="_hrc_int_N2500B7-content-error">
<inherit scheme="_hrc_int_N2500B7-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N2500B7-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N2500B7-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N2500B7-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mtable.type-content">
<inherit scheme="mtable.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mtable.type-content-error">
<inherit scheme="mtable.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mtable.type-content-cdsect">
<inherit scheme="mtable.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mtable.type-Attributes">
<inherit scheme="mtable.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mtable.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mtable.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mtable.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: groupalign
-->
<scheme name="_hrc_int_N2500DF-content">
<regexp region="Enumeration" match="/left/"/>
<regexp region="Enumeration" match="/center/"/>
<regexp region="Enumeration" match="/right/"/>
<regexp region="Enumeration" match="/decimalpoint/"/>
</scheme>
<scheme name="_hrc_int_N2500DF-content-error">
<inherit scheme="_hrc_int_N2500DF-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N2500DF-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N2500DF-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N2500DF-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="maligngroup.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="maligngroup.type-content-error">
<inherit scheme="maligngroup.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="maligngroup.type-content-cdsect">
<inherit scheme="maligngroup.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="maligngroup.type-Attributes">
<inherit scheme="maligngroup.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="maligngroup.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="maligngroup.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="maligngroup.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: edge
-->
<scheme name="_hrc_int_N2500F9-content">
<regexp region="Enumeration" match="/left/"/>
<regexp region="Enumeration" match="/right/"/>
</scheme>
<scheme name="_hrc_int_N2500F9-content-error">
<inherit scheme="_hrc_int_N2500F9-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N2500F9-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N2500F9-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N2500F9-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="malignmark.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="malignmark.type-content-error">
<inherit scheme="malignmark.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="malignmark.type-content-cdsect">
<inherit scheme="malignmark.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="malignmark.type-Attributes">
<inherit scheme="malignmark.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="malignmark.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="malignmark.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="malignmark.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/table.xsd-->
<!--START INCLUDING FILE: presentation/style.xsd-->
<scheme name="mstyle.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(scriptlevel)\M([\s\=]|$)/x" scheme="xmlschema:integer-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(displaystyle)\M([\s\=]|$)/x" scheme="xmlschema:boolean-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(scriptsizemultiplier)\M([\s\=]|$)/x" scheme="xmlschema:decimal-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(scriptminsize)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(color)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(background)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(veryverythinmathspace)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(verythinmathspace)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(thinmathspace)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(mediummathspace)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(thickmathspace)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(verythickmathspace)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(veryverythickmathspace)\M([\s\=]|$)/x" scheme="length-with-unit-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(linethickness)\M([\s\=]|$)/x" scheme="_hrc_int_N2B0041-AttributeContent"/>
<inherit scheme="Operator.attrib-attributeGroup"/>
<inherit scheme="Token-style.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mstyle.content-group">
<inherit scheme="Presentation-expr.class-group"/>
</scheme>
<scheme name="mstyle-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mstyle ([\s\/&gt;]|$) )/x" scheme="mstyle.type-elementContent"/>
</scheme>
<!--
        parent: linethickness
-->
<scheme name="_hrc_int_N2B0041-content">
<!--union:-->
<inherit scheme="length-with-optional-unit-content"/>
<inherit scheme="thickness-content"/>
</scheme>
<scheme name="_hrc_int_N2B0041-content-error">
<inherit scheme="_hrc_int_N2B0041-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N2B0041-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N2B0041-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N2B0041-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="mstyle.type-content">
<inherit scheme="mstyle.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mstyle.type-content-error">
<inherit scheme="mstyle.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mstyle.type-content-cdsect">
<inherit scheme="mstyle.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mstyle.type-Attributes">
<inherit scheme="mstyle.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mstyle.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mstyle.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mstyle.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/style.xsd-->
<!--START INCLUDING FILE: presentation/error.xsd-->
<scheme name="merror.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="merror.content-group">
<inherit scheme="Presentation-expr.class-group"/>
</scheme>
<scheme name="merror-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;merror ([\s\/&gt;]|$) )/x" scheme="merror.type-elementContent"/>
</scheme>
<scheme name="merror.type-content">
<inherit scheme="merror.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="merror.type-content-error">
<inherit scheme="merror.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="merror.type-content-cdsect">
<inherit scheme="merror.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="merror.type-Attributes">
<inherit scheme="merror.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="merror.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="merror.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="merror.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/error.xsd-->
<!--START INCLUDING FILE: presentation/action.xsd-->
<scheme name="maction.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(actiontype)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(selection)\M([\s\=]|$)/x" scheme="xmlschema:positiveInteger-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="maction.content-group">
<inherit scheme="Presentation-expr.class-group"/>
</scheme>
<scheme name="maction-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;maction ([\s\/&gt;]|$) )/x" scheme="maction.type-elementContent"/>
</scheme>
<scheme name="maction.type-content">
<inherit scheme="maction.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="maction.type-content-error">
<inherit scheme="maction.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="maction.type-content-cdsect">
<inherit scheme="maction.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="maction.type-Attributes">
<inherit scheme="maction.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="maction.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="maction.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="maction.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: presentation/action.xsd-->
<!--START INCLUDING FILE: content/common-attrib.xsd-->
<scheme name="Definition.attrib-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(encoding)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(definitionURL)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
</scheme>
<!--END   INCLUDING FILE: content/common-attrib.xsd-->
<!--START INCLUDING FILE: content/tokens.xsd-->
<scheme name="Content-token.content-group">
<inherit scheme="Presentation-expr.class-group"/>
</scheme>
<scheme name="cn.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(base)\M([\s\=]|$)/x" scheme="_hrc_int_N310015-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="_hrc_int_N31001E-AttributeContent"/>
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="sep-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sep ([\s\/&gt;]|$) )/x" scheme="sep.type-elementContent"/>
</scheme>
<scheme name="cn.content-group">
<inherit scheme="Presentation-expr.class-group"/>
<inherit scheme="sep-element"/>
</scheme>
<scheme name="cn-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;cn ([\s\/&gt;]|$) )/x" scheme="cn.type-elementContent"/>
</scheme>
<scheme name="ci.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="ci-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;ci ([\s\/&gt;]|$) )/x" scheme="ci.type-elementContent"/>
</scheme>
<scheme name="csymbol.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="csymbol-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;csymbol ([\s\/&gt;]|$) )/x" scheme="csymbol.type-elementContent"/>
</scheme>
<scheme name="Content-tokens.class-group">
<inherit scheme="cn-element"/>
<inherit scheme="ci-element"/>
<inherit scheme="csymbol-element"/>
</scheme>
<!--
        parent: base
-->
<scheme name="_hrc_int_N310015-content">
<inherit scheme="xmlschema:positiveInteger-content"/>
</scheme>
<scheme name="_hrc_int_N310015-content-error">
<inherit scheme="_hrc_int_N310015-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N310015-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N310015-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N310015-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<!--
        parent: type
-->
<scheme name="_hrc_int_N31001E-content">
<regexp region="Enumeration" match="/integer/"/>
<regexp region="Enumeration" match="/rational/"/>
<regexp region="Enumeration" match="/real/"/>
<regexp region="Enumeration" match="/complex-cartesian/"/>
<regexp region="Enumeration" match="/complex-polar/"/>
<regexp region="Enumeration" match="/constant/"/>
</scheme>
<scheme name="_hrc_int_N31001E-content-error">
<inherit scheme="_hrc_int_N31001E-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N31001E-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N31001E-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N31001E-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="sep.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="sep.type-content-error">
<inherit scheme="sep.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="sep.type-content-cdsect">
<inherit scheme="sep.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="sep.type-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="sep.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="sep.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="sep.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="cn.type-content">
<inherit scheme="cn.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="cn.type-content-error">
<inherit scheme="cn.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="cn.type-content-cdsect">
<inherit scheme="cn.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="cn.type-Attributes">
<inherit scheme="cn.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="cn.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="cn.type-content" scheme="xml:element"/>
<virtual subst-scheme="cn.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="ci.type-content">
<inherit scheme="Content-token.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="ci.type-content-error">
<inherit scheme="ci.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="ci.type-content-cdsect">
<inherit scheme="ci.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="ci.type-Attributes">
<inherit scheme="ci.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="ci.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="ci.type-content" scheme="xml:element"/>
<virtual subst-scheme="ci.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="csymbol.type-content">
<inherit scheme="Content-token.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="csymbol.type-content-error">
<inherit scheme="csymbol.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="csymbol.type-content-cdsect">
<inherit scheme="csymbol.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="csymbol.type-Attributes">
<inherit scheme="csymbol.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="csymbol.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="csymbol.type-content" scheme="xml:element"/>
<virtual subst-scheme="csymbol.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/tokens.xsd-->
<!--START INCLUDING FILE: content/arith.xsd-->
<scheme name="abs-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;abs ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="conjugate-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;conjugate ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="arg-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arg ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="real-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;real ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="imaginary-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;imaginary ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="floor-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;floor ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="ceiling-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;ceiling ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="power-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;power ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="root-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;root ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="minus-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;minus ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="plus-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;plus ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="sum-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sum ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="times-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;times ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="product-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;product ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="max-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;max ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="min-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;min ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="factorial-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;factorial ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="quotient-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;quotient ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="divide-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;divide ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="rem-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;rem ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="gcd-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;gcd ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="lcm-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;lcm ([\s\/&gt;]|$) )/x" scheme="Arith.type-elementContent"/>
</scheme>
<scheme name="Content-arith.class-group">
<inherit scheme="abs-element"/>
<inherit scheme="conjugate-element"/>
<inherit scheme="factorial-element"/>
<inherit scheme="arg-element"/>
<inherit scheme="real-element"/>
<inherit scheme="imaginary-element"/>
<inherit scheme="floor-element"/>
<inherit scheme="ceiling-element"/>
<inherit scheme="quotient-element"/>
<inherit scheme="divide-element"/>
<inherit scheme="rem-element"/>
<inherit scheme="minus-element"/>
<inherit scheme="plus-element"/>
<inherit scheme="times-element"/>
<inherit scheme="power-element"/>
<inherit scheme="root-element"/>
<inherit scheme="max-element"/>
<inherit scheme="min-element"/>
<inherit scheme="gcd-element"/>
<inherit scheme="lcm-element"/>
<inherit scheme="sum-element"/>
<inherit scheme="product-element"/>
</scheme>
<!--
  This is an XML Schema module for the "arithmetic" operators of content
  MathML.
  Author: St√©phane Dalmas, INRIA.
  
-->
<scheme name="Arith.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="Arith.type-content-error">
<inherit scheme="Arith.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="Arith.type-content-cdsect">
<inherit scheme="Arith.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="Arith.type-Attributes">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="Arith.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="Arith.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="Arith.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/arith.xsd-->
<!--START INCLUDING FILE: content/functions.xsd-->
<scheme name="compose-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;compose ([\s\/&gt;]|$) )/x" scheme="Functions.type-elementContent"/>
</scheme>
<scheme name="domain-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;domain ([\s\/&gt;]|$) )/x" scheme="Functions.type-elementContent"/>
</scheme>
<scheme name="codomain-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;codomain ([\s\/&gt;]|$) )/x" scheme="Functions.type-elementContent"/>
</scheme>
<scheme name="image-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;image ([\s\/&gt;]|$) )/x" scheme="Functions.type-elementContent"/>
</scheme>
<scheme name="domainofapplication.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="domainofapplication-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;domainofapplication ([\s\/&gt;]|$) )/x" scheme="domainofapplication.type-elementContent"/>
</scheme>
<scheme name="ident-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;ident ([\s\/&gt;]|$) )/x" scheme="Functions.type-elementContent"/>
</scheme>
<scheme name="Content-functions.class-group">
<inherit scheme="compose-element"/>
<inherit scheme="domain-element"/>
<inherit scheme="codomain-element"/>
<inherit scheme="image-element"/>
<inherit scheme="domainofapplication-element"/>
<inherit scheme="ident-element"/>
</scheme>
<!--
  This is an XML Schema module for operators dealing with functions in content
  MathML.
  Author: St√©phane Dalmas, INRIA.
  
-->
<scheme name="Functions.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="Functions.type-content-error">
<inherit scheme="Functions.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="Functions.type-content-cdsect">
<inherit scheme="Functions.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="Functions.type-Attributes">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="Functions.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="Functions.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="Functions.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="domainofapplication.type-content">
<inherit scheme="domainofapplication.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="domainofapplication.type-content-error">
<inherit scheme="domainofapplication.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="domainofapplication.type-content-cdsect">
<inherit scheme="domainofapplication.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="domainofapplication.type-Attributes">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="domainofapplication.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="domainofapplication.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="domainofapplication.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/functions.xsd-->
<!--START INCLUDING FILE: content/logic.xsd-->
<scheme name="and-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;and ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="or-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;or ([\s\/&gt;]|$) )/x" scheme="Logic.type-elementContent"/>
</scheme>
<scheme name="xor-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;xor ([\s\/&gt;]|$) )/x" scheme="Logic.type-elementContent"/>
</scheme>
<scheme name="not-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;not ([\s\/&gt;]|$) )/x" scheme="Logic.type-elementContent"/>
</scheme>
<scheme name="exists-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;exists ([\s\/&gt;]|$) )/x" scheme="Logic.type-elementContent"/>
</scheme>
<scheme name="forall-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;forall ([\s\/&gt;]|$) )/x" scheme="Logic.type-elementContent"/>
</scheme>
<scheme name="implies-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;implies ([\s\/&gt;]|$) )/x" scheme="Logic.type-elementContent"/>
</scheme>
<scheme name="Content-logic.class-group">
<inherit scheme="and-element"/>
<inherit scheme="or-element"/>
<inherit scheme="xor-element"/>
<inherit scheme="not-element"/>
<inherit scheme="exists-element"/>
<inherit scheme="forall-element"/>
<inherit scheme="implies-element"/>
</scheme>
<!--
  This is an XML Schema module for the logic operators of content MathML.
  Author: St√©phane Dalmas, INRIA.
  
-->
<scheme name="Logic.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="Logic.type-content-error">
<inherit scheme="Logic.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="Logic.type-content-cdsect">
<inherit scheme="Logic.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="Logic.type-Attributes">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="Logic.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="Logic.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="Logic.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/logic.xsd-->
<!--START INCLUDING FILE: content/constructs.xsd-->
<scheme name="apply.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="apply.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="apply-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;apply ([\s\/&gt;]|$) )/x" scheme="apply.type-elementContent"/>
</scheme>
<scheme name="fn.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="fn.content-group">
<inherit scheme="Content-expr.class-group"/>
<inherit scheme="Presentation-expr.class-group"/>
</scheme>
<scheme name="fn-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;fn ([\s\/&gt;]|$) )/x" scheme="fn.type-elementContent"/>
</scheme>
<scheme name="interval.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(closure)\M([\s\=]|$)/x" scheme="_hrc_int_N39003A-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="interval-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;interval ([\s\/&gt;]|$) )/x" scheme="interval.type-elementContent"/>
</scheme>
<scheme name="inverse.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="inverse-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;inverse ([\s\/&gt;]|$) )/x" scheme="inverse.type-elementContent"/>
</scheme>
<scheme name="condition.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
</scheme>
<scheme name="condition.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="condition-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;condition ([\s\/&gt;]|$) )/x" scheme="condition.type-elementContent"/>
</scheme>
<scheme name="declare.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(scope)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(nargs)\M([\s\=]|$)/x" scheme="xmlschema:nonNegativeInteger-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(occurrence)\M([\s\=]|$)/x" scheme="_hrc_int_N390084-AttributeContent"/>
<inherit scheme="Definition.attrib-attributeGroup"/>
</scheme>
<scheme name="declare.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="declare-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;declare ([\s\/&gt;]|$) )/x" scheme="declare.type-elementContent"/>
</scheme>
<scheme name="lambda.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="lambda.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="lambda-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;lambda ([\s\/&gt;]|$) )/x" scheme="lambda.type-elementContent"/>
</scheme>
<scheme name="otherwise.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="otherwise-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;otherwise ([\s\/&gt;]|$) )/x" scheme="otherwise.type-elementContent"/>
</scheme>
<scheme name="piece.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="piece-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;piece ([\s\/&gt;]|$) )/x" scheme="piece.type-elementContent"/>
</scheme>
<scheme name="piecewise.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="piecewise.content-group">
<inherit scheme="piece-element"/>
<inherit scheme="otherwise-element"/>
<inherit scheme="piece-element"/>
</scheme>
<scheme name="piecewise-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;piecewise ([\s\/&gt;]|$) )/x" scheme="piecewise.type-elementContent"/>
</scheme>
<scheme name="bvar.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="bvar.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="bvar-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;bvar ([\s\/&gt;]|$) )/x" scheme="bvar.type-elementContent"/>
</scheme>
<scheme name="degree.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="degree.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="degree-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;degree ([\s\/&gt;]|$) )/x" scheme="degree.type-elementContent"/>
</scheme>
<scheme name="Content-constructs.class-group">
<inherit scheme="apply-element"/>
<inherit scheme="fn-element"/>
<inherit scheme="interval-element"/>
<inherit scheme="inverse-element"/>
<inherit scheme="condition-element"/>
<inherit scheme="declare-element"/>
<inherit scheme="lambda-element"/>
<inherit scheme="piecewise-element"/>
<inherit scheme="bvar-element"/>
<inherit scheme="degree-element"/>
</scheme>
<scheme name="apply.type-content">
<inherit scheme="apply.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="apply.type-content-error">
<inherit scheme="apply.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="apply.type-content-cdsect">
<inherit scheme="apply.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="apply.type-Attributes">
<inherit scheme="apply.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="apply.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="apply.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="apply.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="fn.type-content">
<inherit scheme="fn.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="fn.type-content-error">
<inherit scheme="fn.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="fn.type-content-cdsect">
<inherit scheme="fn.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="fn.type-Attributes">
<inherit scheme="fn.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="fn.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="fn.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="fn.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: closure
-->
<scheme name="_hrc_int_N39003A-content">
<regexp region="Enumeration" match="/closed/"/>
<regexp region="Enumeration" match="/open/"/>
<regexp region="Enumeration" match="/open-closed/"/>
<regexp region="Enumeration" match="/closed-open/"/>
</scheme>
<scheme name="_hrc_int_N39003A-content-error">
<inherit scheme="_hrc_int_N39003A-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N39003A-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N39003A-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N39003A-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="interval.type-content">
<inherit scheme="Content-expr.class-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="interval.type-content-error">
<inherit scheme="interval.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="interval.type-content-cdsect">
<inherit scheme="interval.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="interval.type-Attributes">
<inherit scheme="interval.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="interval.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="interval.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="interval.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="inverse.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="inverse.type-content-error">
<inherit scheme="inverse.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="inverse.type-content-cdsect">
<inherit scheme="inverse.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="inverse.type-Attributes">
<inherit scheme="inverse.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="inverse.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="inverse.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="inverse.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="condition.type-content">
<inherit scheme="condition.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="condition.type-content-error">
<inherit scheme="condition.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="condition.type-content-cdsect">
<inherit scheme="condition.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="condition.type-Attributes">
<inherit scheme="condition.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="condition.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="condition.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="condition.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: occurrence
-->
<scheme name="_hrc_int_N390084-content">
<regexp region="Enumeration" match="/prefix/"/>
<regexp region="Enumeration" match="/infix/"/>
<regexp region="Enumeration" match="/function-model/"/>
</scheme>
<scheme name="_hrc_int_N390084-content-error">
<inherit scheme="_hrc_int_N390084-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N390084-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N390084-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N390084-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="declare.type-content">
<inherit scheme="declare.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="declare.type-content-error">
<inherit scheme="declare.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="declare.type-content-cdsect">
<inherit scheme="declare.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="declare.type-Attributes">
<inherit scheme="declare.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="declare.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="declare.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="declare.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="lambda.type-content">
<inherit scheme="lambda.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="lambda.type-content-error">
<inherit scheme="lambda.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="lambda.type-content-cdsect">
<inherit scheme="lambda.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="lambda.type-Attributes">
<inherit scheme="lambda.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="lambda.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="lambda.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="lambda.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="otherwise.type-content">
<inherit scheme="otherwise.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="otherwise.type-content-error">
<inherit scheme="otherwise.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="otherwise.type-content-cdsect">
<inherit scheme="otherwise.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="otherwise.type-Attributes">
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="otherwise.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="otherwise.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="otherwise.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="piece.type-content">
<inherit scheme="piece.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="piece.type-content-error">
<inherit scheme="piece.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="piece.type-content-cdsect">
<inherit scheme="piece.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="piece.type-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="piece.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="piece.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="piece.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="piecewise.type-content">
<inherit scheme="piecewise.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="piecewise.type-content-error">
<inherit scheme="piecewise.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="piecewise.type-content-cdsect">
<inherit scheme="piecewise.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="piecewise.type-Attributes">
<inherit scheme="piecewise.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="piecewise.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="piecewise.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="piecewise.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="bvar.type-content">
<inherit scheme="bvar.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="bvar.type-content-error">
<inherit scheme="bvar.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="bvar.type-content-cdsect">
<inherit scheme="bvar.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="bvar.type-Attributes">
<inherit scheme="bvar.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="bvar.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="bvar.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="bvar.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="degree.type-content">
<inherit scheme="degree.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="degree.type-content-error">
<inherit scheme="degree.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="degree.type-content-cdsect">
<inherit scheme="degree.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="degree.type-Attributes">
<inherit scheme="degree.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="degree.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="degree.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="degree.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/constructs.xsd-->
<!--START INCLUDING FILE: content/constants.xsd-->
<scheme name="naturalnumbers-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;naturalnumbers ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="primes-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;primes ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="integers-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;integers ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="rationals-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;rationals ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="reals-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;reals ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="complexes-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;complexes ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="emptyset-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;emptyset ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="exponentiale-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;exponentiale ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="imaginaryi-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;imaginaryi ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="pi-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;pi ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="eulergamma-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;eulergamma ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="true-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;true ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="false-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;false ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="infinity-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;infinity ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="notanumber-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;notanumber ([\s\/&gt;]|$) )/x" scheme="Constant.type-elementContent"/>
</scheme>
<scheme name="Content-constants.class-group">
<inherit scheme="naturalnumbers-element"/>
<inherit scheme="primes-element"/>
<inherit scheme="integers-element"/>
<inherit scheme="rationals-element"/>
<inherit scheme="reals-element"/>
<inherit scheme="complexes-element"/>
<inherit scheme="emptyset-element"/>
<inherit scheme="exponentiale-element"/>
<inherit scheme="imaginaryi-element"/>
<inherit scheme="pi-element"/>
<inherit scheme="eulergamma-element"/>
<inherit scheme="true-element"/>
<inherit scheme="false-element"/>
<inherit scheme="infinity-element"/>
<inherit scheme="notanumber-element"/>
</scheme>
<!--
  This is the XML Schema module for the basic constants of MathML content.
  Author: St√©phane Dalmas.
  
-->
<scheme name="Constant.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="Constant.type-content-error">
<inherit scheme="Constant.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="Constant.type-content-cdsect">
<inherit scheme="Constant.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="Constant.type-Attributes">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="Constant.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="Constant.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="Constant.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/constants.xsd-->
<!--START INCLUDING FILE: content/elementary-functions.xsd-->
<scheme name="exp-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;exp ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="ln-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;ln ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="log-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;log ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="logbase.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="logbase-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;logbase ([\s\/&gt;]|$) )/x" scheme="logbase.type-elementContent"/>
</scheme>
<scheme name="sin-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sin ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="cos-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;cos ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="tan-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;tan ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="sec-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sec ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="csc-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;csc ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="cot-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;cot ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arcsin-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arcsin ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arccos-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arccos ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arctan-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arctan ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arccot-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arccot ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arccsc-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arccsc ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arcsec-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arcsec ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="sinh-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sinh ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="cosh-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;cosh ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="tanh-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;tanh ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="sech-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sech ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="csch-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;csch ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="coth-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;coth ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arccosh-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arccosh ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arccoth-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arccoth ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arccsch-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arccsch ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arcsech-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arcsech ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arcsinh-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arcsinh ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="arctanh-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;arctanh ([\s\/&gt;]|$) )/x" scheme="Elementary-functions.type-elementContent"/>
</scheme>
<scheme name="Content-elementary-functions.class-group">
<inherit scheme="exp-element"/>
<inherit scheme="ln-element"/>
<inherit scheme="log-element"/>
<inherit scheme="logbase-element"/>
<inherit scheme="sin-element"/>
<inherit scheme="cos-element"/>
<inherit scheme="tan-element"/>
<inherit scheme="sec-element"/>
<inherit scheme="csc-element"/>
<inherit scheme="cot-element"/>
<inherit scheme="arcsin-element"/>
<inherit scheme="arccos-element"/>
<inherit scheme="arctan-element"/>
<inherit scheme="arcsec-element"/>
<inherit scheme="arccsc-element"/>
<inherit scheme="arccot-element"/>
<inherit scheme="sinh-element"/>
<inherit scheme="cosh-element"/>
<inherit scheme="tanh-element"/>
<inherit scheme="sech-element"/>
<inherit scheme="csch-element"/>
<inherit scheme="coth-element"/>
<inherit scheme="arccosh-element"/>
<inherit scheme="arccoth-element"/>
<inherit scheme="arccsch-element"/>
<inherit scheme="arcsech-element"/>
<inherit scheme="arcsinh-element"/>
<inherit scheme="arctanh-element"/>
</scheme>
<!--
  This is an XML Schema module for the elementary functions in content
  MathML.
  Author: St√©phane Dalmas, INRIA.
  
-->
<scheme name="Elementary-functions.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="Elementary-functions.type-content-error">
<inherit scheme="Elementary-functions.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="Elementary-functions.type-content-cdsect">
<inherit scheme="Elementary-functions.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="Elementary-functions.type-Attributes">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="Elementary-functions.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="Elementary-functions.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="Elementary-functions.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="logbase.type-content">
<inherit scheme="logbase.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="logbase.type-content-error">
<inherit scheme="logbase.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="logbase.type-content-cdsect">
<inherit scheme="logbase.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="logbase.type-Attributes">
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="logbase.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="logbase.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="logbase.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/elementary-functions.xsd-->
<!--START INCLUDING FILE: content/relations.xsd-->
<scheme name="eq-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;eq ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="neq-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;neq ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="leq-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;leq ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="lt-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;lt ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="geq-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;geq ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="gt-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;gt ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="equivalent-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;equivalent ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="approx-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;approx ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="factorof-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;factorof ([\s\/&gt;]|$) )/x" scheme="Relations.type-elementContent"/>
</scheme>
<scheme name="Content-relations.class-group">
<inherit scheme="eq-element"/>
<inherit scheme="neq-element"/>
<inherit scheme="leq-element"/>
<inherit scheme="lt-element"/>
<inherit scheme="geq-element"/>
<inherit scheme="gt-element"/>
<inherit scheme="equivalent-element"/>
<inherit scheme="approx-element"/>
<inherit scheme="factorof-element"/>
</scheme>
<!--
  This is an XML Schema module for the relational operators of content MathML.
  Author: St√©phane Dalmas, INRIA.
  
-->
<scheme name="Relations.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="Relations.type-content-error">
<inherit scheme="Relations.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="Relations.type-content-cdsect">
<inherit scheme="Relations.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="Relations.type-Attributes">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="Relations.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="Relations.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="Relations.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/relations.xsd-->
<!--START INCLUDING FILE: content/semantics.xsd-->
<scheme name="annotation.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(encoding)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="annotation-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;annotation ([\s\/&gt;]|$) )/x" scheme="annotation.type-elementContent"/>
</scheme>
<scheme name="annotation-xml.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(encoding)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="annotation-xml.content-group">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="annotation-xml-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;annotation-xml ([\s\/&gt;]|$) )/x" scheme="annotation-xml.type-elementContent"/>
</scheme>
<scheme name="semantics.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(encoding)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(definitionURL)\M([\s\=]|$)/x" scheme="xmlschema:anyURI-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="Annotation.class-group">
<inherit scheme="annotation-element"/>
<inherit scheme="annotation-xml-element"/>
</scheme>
<scheme name="semantics.content-group">
<inherit scheme="Content-expr.class-group"/>
<inherit scheme="Annotation.class-group"/>
</scheme>
<scheme name="semantics-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;semantics ([\s\/&gt;]|$) )/x" scheme="semantics.type-elementContent"/>
</scheme>
<scheme name="annotation.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="annotation.type-content-error">
<inherit scheme="annotation.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="annotation.type-content-cdsect">
<inherit scheme="annotation.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="annotation.type-Attributes">
<inherit scheme="annotation.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="annotation.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="annotation.type-content" scheme="xml:element"/>
<virtual subst-scheme="annotation.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="annotation-xml.type-content">
<inherit scheme="annotation-xml.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="annotation-xml.type-content-error">
<inherit scheme="annotation-xml.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="annotation-xml.type-content-cdsect">
<inherit scheme="annotation-xml.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="annotation-xml.type-Attributes">
<inherit scheme="annotation-xml.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="annotation-xml.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="annotation-xml.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="annotation-xml.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="semantics.type-content">
<inherit scheme="semantics.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="semantics.type-content-error">
<inherit scheme="semantics.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="semantics.type-content-cdsect">
<inherit scheme="semantics.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="semantics.type-Attributes">
<inherit scheme="semantics.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="semantics.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="semantics.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="semantics.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/semantics.xsd-->
<!--START INCLUDING FILE: content/sets.xsd-->
<scheme name="set.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="set.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="set-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;set ([\s\/&gt;]|$) )/x" scheme="set.type-elementContent"/>
</scheme>
<scheme name="list.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(order)\M([\s\=]|$)/x" scheme="_hrc_int_N420028-AttributeContent"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="list.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="list-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;list ([\s\/&gt;]|$) )/x" scheme="list.type-elementContent"/>
</scheme>
<scheme name="union.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="union-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;union ([\s\/&gt;]|$) )/x" scheme="union.type-elementContent"/>
</scheme>
<scheme name="intersect.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="intersect-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;intersect ([\s\/&gt;]|$) )/x" scheme="intersect.type-elementContent"/>
</scheme>
<scheme name="in.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="in-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;in ([\s\/&gt;]|$) )/x" scheme="in.type-elementContent"/>
</scheme>
<scheme name="notin.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="notin-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;notin ([\s\/&gt;]|$) )/x" scheme="notin.type-elementContent"/>
</scheme>
<scheme name="subset.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="subset-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;subset ([\s\/&gt;]|$) )/x" scheme="subset.type-elementContent"/>
</scheme>
<scheme name="prsubset.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="prsubset-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;prsubset ([\s\/&gt;]|$) )/x" scheme="prsubset.type-elementContent"/>
</scheme>
<scheme name="notsubset.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="notsubset-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;notsubset ([\s\/&gt;]|$) )/x" scheme="notsubset.type-elementContent"/>
</scheme>
<scheme name="notprsubset.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="notprsubset-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;notprsubset ([\s\/&gt;]|$) )/x" scheme="notprsubset.type-elementContent"/>
</scheme>
<scheme name="setdiff.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="setdiff-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;setdiff ([\s\/&gt;]|$) )/x" scheme="setdiff.type-elementContent"/>
</scheme>
<scheme name="card.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="card-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;card ([\s\/&gt;]|$) )/x" scheme="card.type-elementContent"/>
</scheme>
<scheme name="cartesianproduct.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="cartesianproduct-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;cartesianproduct ([\s\/&gt;]|$) )/x" scheme="cartesianproduct.type-elementContent"/>
</scheme>
<scheme name="Content-sets.class-group">
<inherit scheme="set-element"/>
<inherit scheme="list-element"/>
<inherit scheme="union-element"/>
<inherit scheme="intersect-element"/>
<inherit scheme="in-element"/>
<inherit scheme="notin-element"/>
<inherit scheme="subset-element"/>
<inherit scheme="prsubset-element"/>
<inherit scheme="notsubset-element"/>
<inherit scheme="notprsubset-element"/>
<inherit scheme="setdiff-element"/>
<inherit scheme="card-element"/>
<inherit scheme="cartesianproduct-element"/>
</scheme>
<scheme name="set.type-content">
<inherit scheme="set.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="set.type-content-error">
<inherit scheme="set.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="set.type-content-cdsect">
<inherit scheme="set.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="set.type-Attributes">
<inherit scheme="set.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="set.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="set.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="set.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--
        parent: order
-->
<scheme name="_hrc_int_N420028-content">
<regexp region="Enumeration" match="/lexicographic/"/>
<regexp region="Enumeration" match="/numeric/"/>
</scheme>
<scheme name="_hrc_int_N420028-content-error">
<inherit scheme="_hrc_int_N420028-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="_hrc_int_N420028-Attributes">
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="_hrc_int_N420028-AttributeContent">
<inherit scheme="AttributeContent">
<virtual subst-scheme="_hrc_int_N420028-content-error" scheme="xml:AttValue.content.stream"/>
</inherit>
</scheme>
<scheme name="list.type-content">
<inherit scheme="list.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="list.type-content-error">
<inherit scheme="list.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="list.type-content-cdsect">
<inherit scheme="list.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="list.type-Attributes">
<inherit scheme="list.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="list.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="list.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="list.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="union.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="union.type-content-error">
<inherit scheme="union.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="union.type-content-cdsect">
<inherit scheme="union.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="union.type-Attributes">
<inherit scheme="union.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="union.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="union.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="union.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="intersect.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="intersect.type-content-error">
<inherit scheme="intersect.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="intersect.type-content-cdsect">
<inherit scheme="intersect.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="intersect.type-Attributes">
<inherit scheme="intersect.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="intersect.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="intersect.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="intersect.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="in.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="in.type-content-error">
<inherit scheme="in.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="in.type-content-cdsect">
<inherit scheme="in.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="in.type-Attributes">
<inherit scheme="in.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="in.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="in.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="in.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="notin.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="notin.type-content-error">
<inherit scheme="notin.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="notin.type-content-cdsect">
<inherit scheme="notin.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="notin.type-Attributes">
<inherit scheme="notin.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="notin.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="notin.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="notin.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="subset.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="subset.type-content-error">
<inherit scheme="subset.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="subset.type-content-cdsect">
<inherit scheme="subset.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="subset.type-Attributes">
<inherit scheme="subset.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="subset.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="subset.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="subset.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="prsubset.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="prsubset.type-content-error">
<inherit scheme="prsubset.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="prsubset.type-content-cdsect">
<inherit scheme="prsubset.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="prsubset.type-Attributes">
<inherit scheme="prsubset.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="prsubset.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="prsubset.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="prsubset.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="notsubset.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="notsubset.type-content-error">
<inherit scheme="notsubset.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="notsubset.type-content-cdsect">
<inherit scheme="notsubset.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="notsubset.type-Attributes">
<inherit scheme="notsubset.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="notsubset.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="notsubset.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="notsubset.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="notprsubset.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="notprsubset.type-content-error">
<inherit scheme="notprsubset.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="notprsubset.type-content-cdsect">
<inherit scheme="notprsubset.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="notprsubset.type-Attributes">
<inherit scheme="notprsubset.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="notprsubset.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="notprsubset.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="notprsubset.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="setdiff.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="setdiff.type-content-error">
<inherit scheme="setdiff.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="setdiff.type-content-cdsect">
<inherit scheme="setdiff.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="setdiff.type-Attributes">
<inherit scheme="setdiff.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="setdiff.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="setdiff.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="setdiff.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="card.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="card.type-content-error">
<inherit scheme="card.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="card.type-content-cdsect">
<inherit scheme="card.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="card.type-Attributes">
<inherit scheme="card.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="card.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="card.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="card.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="cartesianproduct.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="cartesianproduct.type-content-error">
<inherit scheme="cartesianproduct.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="cartesianproduct.type-content-cdsect">
<inherit scheme="cartesianproduct.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="cartesianproduct.type-Attributes">
<inherit scheme="cartesianproduct.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="cartesianproduct.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="cartesianproduct.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="cartesianproduct.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/sets.xsd-->
<!--START INCLUDING FILE: content/linear-algebra.xsd-->
<scheme name="vector.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="vector.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="vector-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;vector ([\s\/&gt;]|$) )/x" scheme="vector.type-elementContent"/>
</scheme>
<scheme name="matrix.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="matrix.content-group">
<inherit scheme="matrixrow-element"/>
</scheme>
<scheme name="matrix-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;matrix ([\s\/&gt;]|$) )/x" scheme="matrix.type-elementContent"/>
</scheme>
<scheme name="matrixrow.attlist-attributeGroup">
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="matrixrow.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="matrixrow-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;matrixrow ([\s\/&gt;]|$) )/x" scheme="matrixrow.type-elementContent"/>
</scheme>
<scheme name="determinant.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="determinant-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;determinant ([\s\/&gt;]|$) )/x" scheme="determinant.type-elementContent"/>
</scheme>
<scheme name="transpose.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="transpose-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;transpose ([\s\/&gt;]|$) )/x" scheme="transpose.type-elementContent"/>
</scheme>
<scheme name="selector.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="selector-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;selector ([\s\/&gt;]|$) )/x" scheme="selector.type-elementContent"/>
</scheme>
<scheme name="vectorproduct.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="vectorproduct-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;vectorproduct ([\s\/&gt;]|$) )/x" scheme="vectorproduct.type-elementContent"/>
</scheme>
<scheme name="scalarproduct.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="scalarproduct-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;scalarproduct ([\s\/&gt;]|$) )/x" scheme="scalarproduct.type-elementContent"/>
</scheme>
<scheme name="outerproduct.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="outerproduct-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;outerproduct ([\s\/&gt;]|$) )/x" scheme="outerproduct.type-elementContent"/>
</scheme>
<scheme name="Content-linear-algebra.class-group">
<inherit scheme="vector-element"/>
<inherit scheme="matrix-element"/>
<inherit scheme="determinant-element"/>
<inherit scheme="transpose-element"/>
<inherit scheme="selector-element"/>
<inherit scheme="vectorproduct-element"/>
<inherit scheme="scalarproduct-element"/>
<inherit scheme="outerproduct-element"/>
</scheme>
<scheme name="vector.type-content">
<inherit scheme="vector.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="vector.type-content-error">
<inherit scheme="vector.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="vector.type-content-cdsect">
<inherit scheme="vector.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="vector.type-Attributes">
<inherit scheme="vector.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="vector.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="vector.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="vector.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="matrix.type-content">
<inherit scheme="matrix.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="matrix.type-content-error">
<inherit scheme="matrix.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="matrix.type-content-cdsect">
<inherit scheme="matrix.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="matrix.type-Attributes">
<inherit scheme="matrix.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="matrix.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="matrix.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="matrix.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="matrixrow.type-content">
<inherit scheme="matrixrow.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="matrixrow.type-content-error">
<inherit scheme="matrixrow.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="matrixrow.type-content-cdsect">
<inherit scheme="matrixrow.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="matrixrow.type-Attributes">
<inherit scheme="matrixrow.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="matrixrow.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="matrixrow.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="matrixrow.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="determinant.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="determinant.type-content-error">
<inherit scheme="determinant.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="determinant.type-content-cdsect">
<inherit scheme="determinant.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="determinant.type-Attributes">
<inherit scheme="determinant.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="determinant.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="determinant.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="determinant.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="transpose.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="transpose.type-content-error">
<inherit scheme="transpose.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="transpose.type-content-cdsect">
<inherit scheme="transpose.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="transpose.type-Attributes">
<inherit scheme="transpose.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="transpose.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="transpose.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="transpose.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="selector.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="selector.type-content-error">
<inherit scheme="selector.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="selector.type-content-cdsect">
<inherit scheme="selector.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="selector.type-Attributes">
<inherit scheme="selector.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="selector.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="selector.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="selector.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="vectorproduct.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="vectorproduct.type-content-error">
<inherit scheme="vectorproduct.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="vectorproduct.type-content-cdsect">
<inherit scheme="vectorproduct.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="vectorproduct.type-Attributes">
<inherit scheme="vectorproduct.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="vectorproduct.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="vectorproduct.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="vectorproduct.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="scalarproduct.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="scalarproduct.type-content-error">
<inherit scheme="scalarproduct.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="scalarproduct.type-content-cdsect">
<inherit scheme="scalarproduct.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="scalarproduct.type-Attributes">
<inherit scheme="scalarproduct.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="scalarproduct.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="scalarproduct.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="scalarproduct.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="outerproduct.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="outerproduct.type-content-error">
<inherit scheme="outerproduct.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="outerproduct.type-content-cdsect">
<inherit scheme="outerproduct.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="outerproduct.type-Attributes">
<inherit scheme="outerproduct.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="outerproduct.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="outerproduct.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="outerproduct.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/linear-algebra.xsd-->
<!--START INCLUDING FILE: content/calculus.xsd-->
<scheme name="int.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="int-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;int ([\s\/&gt;]|$) )/x" scheme="int.type-elementContent"/>
</scheme>
<scheme name="diff.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="diff-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;diff ([\s\/&gt;]|$) )/x" scheme="diff.type-elementContent"/>
</scheme>
<scheme name="partialdiff.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="partialdiff-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;partialdiff ([\s\/&gt;]|$) )/x" scheme="partialdiff.type-elementContent"/>
</scheme>
<scheme name="limit.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="limit-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;limit ([\s\/&gt;]|$) )/x" scheme="limit.type-elementContent"/>
</scheme>
<scheme name="lowlimit.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="lowlimit.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="lowlimit-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;lowlimit ([\s\/&gt;]|$) )/x" scheme="lowlimit.type-elementContent"/>
</scheme>
<scheme name="uplimit.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="uplimit.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="uplimit-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;uplimit ([\s\/&gt;]|$) )/x" scheme="uplimit.type-elementContent"/>
</scheme>
<scheme name="tendsto.attlist-attributeGroup">
<block region02="Attribute.name" end="/[&quot;']?#1/" start="/(\s?#1|^)(type)\M([\s\=]|$)/x" scheme="xmlschema:string-AttributeContent"/>
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="tendsto-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;tendsto ([\s\/&gt;]|$) )/x" scheme="tendsto.type-elementContent"/>
</scheme>
<scheme name="Content-calculus.class-group">
<inherit scheme="int-element"/>
<inherit scheme="diff-element"/>
<inherit scheme="partialdiff-element"/>
<inherit scheme="limit-element"/>
<inherit scheme="lowlimit-element"/>
<inherit scheme="uplimit-element"/>
<inherit scheme="tendsto-element"/>
</scheme>
<scheme name="int.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="int.type-content-error">
<inherit scheme="int.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="int.type-content-cdsect">
<inherit scheme="int.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="int.type-Attributes">
<inherit scheme="int.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="int.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="int.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="int.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="diff.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="diff.type-content-error">
<inherit scheme="diff.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="diff.type-content-cdsect">
<inherit scheme="diff.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="diff.type-Attributes">
<inherit scheme="diff.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="diff.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="diff.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="diff.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="partialdiff.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="partialdiff.type-content-error">
<inherit scheme="partialdiff.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="partialdiff.type-content-cdsect">
<inherit scheme="partialdiff.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="partialdiff.type-Attributes">
<inherit scheme="partialdiff.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="partialdiff.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="partialdiff.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="partialdiff.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="limit.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="limit.type-content-error">
<inherit scheme="limit.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="limit.type-content-cdsect">
<inherit scheme="limit.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="limit.type-Attributes">
<inherit scheme="limit.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="limit.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="limit.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="limit.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="lowlimit.type-content">
<inherit scheme="lowlimit.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="lowlimit.type-content-error">
<inherit scheme="lowlimit.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="lowlimit.type-content-cdsect">
<inherit scheme="lowlimit.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="lowlimit.type-Attributes">
<inherit scheme="lowlimit.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="lowlimit.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="lowlimit.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="lowlimit.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="uplimit.type-content">
<inherit scheme="uplimit.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="uplimit.type-content-error">
<inherit scheme="uplimit.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="uplimit.type-content-cdsect">
<inherit scheme="uplimit.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="uplimit.type-Attributes">
<inherit scheme="uplimit.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="uplimit.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="uplimit.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="uplimit.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="tendsto.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="tendsto.type-content-error">
<inherit scheme="tendsto.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="tendsto.type-content-cdsect">
<inherit scheme="tendsto.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="tendsto.type-Attributes">
<inherit scheme="tendsto.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="tendsto.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="tendsto.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="tendsto.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/calculus.xsd-->
<!--START INCLUDING FILE: content/vector-calculus.xsd-->
<scheme name="divergence.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="divergence-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;divergence ([\s\/&gt;]|$) )/x" scheme="divergence.type-elementContent"/>
</scheme>
<scheme name="grad.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="grad-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;grad ([\s\/&gt;]|$) )/x" scheme="grad.type-elementContent"/>
</scheme>
<scheme name="curl.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="curl-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;curl ([\s\/&gt;]|$) )/x" scheme="curl.type-elementContent"/>
</scheme>
<scheme name="laplacian.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="laplacian-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;laplacian ([\s\/&gt;]|$) )/x" scheme="laplacian.type-elementContent"/>
</scheme>
<scheme name="Content-vector-calculus.class-group">
<inherit scheme="divergence-element"/>
<inherit scheme="grad-element"/>
<inherit scheme="curl-element"/>
<inherit scheme="laplacian-element"/>
</scheme>
<scheme name="divergence.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="divergence.type-content-error">
<inherit scheme="divergence.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="divergence.type-content-cdsect">
<inherit scheme="divergence.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="divergence.type-Attributes">
<inherit scheme="divergence.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="divergence.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="divergence.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="divergence.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="grad.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="grad.type-content-error">
<inherit scheme="grad.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="grad.type-content-cdsect">
<inherit scheme="grad.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="grad.type-Attributes">
<inherit scheme="grad.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="grad.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="grad.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="grad.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="curl.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="curl.type-content-error">
<inherit scheme="curl.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="curl.type-content-cdsect">
<inherit scheme="curl.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="curl.type-Attributes">
<inherit scheme="curl.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="curl.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="curl.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="curl.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="laplacian.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="laplacian.type-content-error">
<inherit scheme="laplacian.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="laplacian.type-content-cdsect">
<inherit scheme="laplacian.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="laplacian.type-Attributes">
<inherit scheme="laplacian.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="laplacian.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="laplacian.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="laplacian.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/vector-calculus.xsd-->
<!--START INCLUDING FILE: content/statistics.xsd-->
<scheme name="mean.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mean-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mean ([\s\/&gt;]|$) )/x" scheme="mean.type-elementContent"/>
</scheme>
<scheme name="sdev.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="sdev-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;sdev ([\s\/&gt;]|$) )/x" scheme="sdev.type-elementContent"/>
</scheme>
<scheme name="variance.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="variance-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;variance ([\s\/&gt;]|$) )/x" scheme="variance.type-elementContent"/>
</scheme>
<scheme name="median.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="median-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;median ([\s\/&gt;]|$) )/x" scheme="median.type-elementContent"/>
</scheme>
<scheme name="mode.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="mode-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;mode ([\s\/&gt;]|$) )/x" scheme="mode.type-elementContent"/>
</scheme>
<scheme name="moment.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="moment-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;moment ([\s\/&gt;]|$) )/x" scheme="moment.type-elementContent"/>
</scheme>
<scheme name="momentabout.attlist-attributeGroup">
<inherit scheme="Definition.attrib-attributeGroup"/>
<inherit scheme="Common.attrib-attributeGroup"/>
</scheme>
<scheme name="momentabout.content-group">
<inherit scheme="Content-expr.class-group"/>
</scheme>
<scheme name="momentabout-element">
<block end="/ &gt; /x" start="/\M &lt; (%nsprefix;momentabout ([\s\/&gt;]|$) )/x" scheme="momentabout.type-elementContent"/>
</scheme>
<scheme name="Content-statistics.class-group">
<inherit scheme="mean-element"/>
<inherit scheme="sdev-element"/>
<inherit scheme="variance-element"/>
<inherit scheme="median-element"/>
<inherit scheme="mode-element"/>
<inherit scheme="moment-element"/>
<inherit scheme="momentabout-element"/>
</scheme>
<scheme name="mean.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mean.type-content-error">
<inherit scheme="mean.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mean.type-content-cdsect">
<inherit scheme="mean.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mean.type-Attributes">
<inherit scheme="mean.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mean.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mean.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mean.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="sdev.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="sdev.type-content-error">
<inherit scheme="sdev.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="sdev.type-content-cdsect">
<inherit scheme="sdev.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="sdev.type-Attributes">
<inherit scheme="sdev.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="sdev.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="sdev.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="sdev.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="variance.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="variance.type-content-error">
<inherit scheme="variance.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="variance.type-content-cdsect">
<inherit scheme="variance.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="variance.type-Attributes">
<inherit scheme="variance.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="variance.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="variance.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="variance.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="median.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="median.type-content-error">
<inherit scheme="median.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="median.type-content-cdsect">
<inherit scheme="median.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="median.type-Attributes">
<inherit scheme="median.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="median.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="median.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="median.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="mode.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="mode.type-content-error">
<inherit scheme="mode.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="mode.type-content-cdsect">
<inherit scheme="mode.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="mode.type-Attributes">
<inherit scheme="mode.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="mode.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="mode.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="mode.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="moment.type-content">
<inherit scheme="xml:element"/>
</scheme>
<scheme name="moment.type-content-error">
<inherit scheme="moment.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="moment.type-content-cdsect">
<inherit scheme="moment.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="moment.type-Attributes">
<inherit scheme="moment.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="moment.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="moment.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="moment.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<scheme name="momentabout.type-content">
<inherit scheme="momentabout.content-group"/>
<inherit scheme="xml:element"/>
</scheme>
<scheme name="momentabout.type-content-error">
<inherit scheme="momentabout.type-content"/>
<inherit scheme="xml:badChar"/>
</scheme>
<scheme name="momentabout.type-content-cdsect">
<inherit scheme="momentabout.type-content-error">
<virtual subst-scheme="xml:badCDLiter" scheme="xml:badLiter"/>
<virtual subst-scheme="def:empty" scheme="xml:Reference"/>
</inherit>
</scheme>
<scheme name="momentabout.type-Attributes">
<inherit scheme="momentabout.attlist-attributeGroup"/>
<inherit scheme="xml:Attribute.any"/>
</scheme>
<scheme name="momentabout.type-elementContent">
<inherit scheme="_hrc_int_elementContent">
<virtual subst-scheme="momentabout.type-content" scheme="xml:element"/>
<virtual subst-scheme="xml:badChar" scheme="xml:content.cdata"/>
<virtual subst-scheme="momentabout.type-Attributes" scheme="xml:Attribute.any"/>
</inherit>
</scheme>
<!--END   INCLUDING FILE: content/statistics.xsd-->

<scheme name="mathml-root">
<inherit scheme="math-element"/>
</scheme>
<scheme name="mathml-root-addref">
<inherit scheme="mathml-root"/>
</scheme>
<scheme name="mathml">
<inherit scheme="xml:singleroot">
<virtual subst-scheme="mathml-root-addref" scheme="xml:element"/>
</inherit>
</scheme>
</type>
</hrc>
